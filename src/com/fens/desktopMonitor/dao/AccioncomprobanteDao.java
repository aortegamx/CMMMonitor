/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.fens.desktopMonitor.dao;

import com.fens.desktopMonitor.dto.*;
import com.fens.desktopMonitor.exceptions.*;

public interface AccioncomprobanteDao
{
	/** 
	 * Inserts a new row in the ACCIONCOMPROBANTE table.
	 */
	public AccioncomprobantePk insert(Accioncomprobante dto) throws AccioncomprobanteDaoException;

	/** 
	 * Updates a single row in the ACCIONCOMPROBANTE table.
	 */
	public void update(AccioncomprobantePk pk, Accioncomprobante dto) throws AccioncomprobanteDaoException;

	/** 
	 * Deletes a single row in the ACCIONCOMPROBANTE table.
	 */
	public void delete(AccioncomprobantePk pk) throws AccioncomprobanteDaoException;

	/** 
	 * Returns the rows from the ACCIONCOMPROBANTE table that matches the specified primary-key value.
	 */
	public Accioncomprobante findByPrimaryKey(AccioncomprobantePk pk) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ID_ACCION_COMPROBANTE = :idAccionComprobante'.
	 */
	public Accioncomprobante findByPrimaryKey(int idAccionComprobante) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria ''.
	 */
	public Accioncomprobante[] findAll() throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ID_ACCION_COMPROBANTE = :idAccionComprobante'.
	 */
	public Accioncomprobante[] findWhereIdAccionComprobanteEquals(int idAccionComprobante) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'CLAVE_ACCION = :claveAccion'.
	 */
	public Accioncomprobante[] findWhereClaveAccionEquals(String claveAccion) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'CODIGO_POSTAL_AUTO = :codigoPostalAuto'.
	 */
	public Accioncomprobante[] findWhereCodigoPostalAutoEquals(String codigoPostalAuto) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ACTIVAR_COPIA_ARCHIVO = :activarCopiaArchivo'.
	 */
	public Accioncomprobante[] findWhereActivarCopiaArchivoEquals(int activarCopiaArchivo) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'RUTA_COPIA_ARCHIVO = :rutaCopiaArchivo'.
	 */
	public Accioncomprobante[] findWhereRutaCopiaArchivoEquals(String rutaCopiaArchivo) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ACTIVAR_CORREO = :activarCorreo'.
	 */
	public Accioncomprobante[] findWhereActivarCorreoEquals(int activarCorreo) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'CORREO_DESTINATARIOS = :correoDestinatarios'.
	 */
	public Accioncomprobante[] findWhereCorreoDestinatariosEquals(String correoDestinatarios) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ACTIVAR_IMPRESION = :activarImpresion'.
	 */
	public Accioncomprobante[] findWhereActivarImpresionEquals(int activarImpresion) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'NOMBRE_IMPRESORA = :nombreImpresora'.
	 */
	public Accioncomprobante[] findWhereNombreImpresoraEquals(String nombreImpresora) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'PLANTILLA_FACTURA = :plantillaFactura'.
	 */
	public Accioncomprobante[] findWherePlantillaFacturaEquals(String plantillaFactura) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'PLANTILLA_NOMINA = :plantillaNomina'.
	 */
	public Accioncomprobante[] findWherePlantillaNominaEquals(String plantillaNomina) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'RUTA_LOGO = :rutaLogo'.
	 */
	public Accioncomprobante[] findWhereRutaLogoEquals(String rutaLogo) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ACTIVAR_SOPORTE_ADOBE = :activarSoporteAdobe'.
	 */
	public Accioncomprobante[] findWhereActivarSoporteAdobeEquals(int activarSoporteAdobe) throws AccioncomprobanteDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the specified arbitrary SQL statement
	 */
	public Accioncomprobante[] findByDynamicSelect(String sql, Object[] sqlParams) throws AccioncomprobanteDaoException;

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the specified arbitrary SQL statement
	 */
	public Accioncomprobante[] findByDynamicWhere(String sql, Object[] sqlParams) throws AccioncomprobanteDaoException;

}
