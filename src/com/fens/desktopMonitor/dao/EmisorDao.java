/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.fens.desktopMonitor.dao;

import com.fens.desktopMonitor.dto.*;
import com.fens.desktopMonitor.exceptions.*;

public interface EmisorDao
{
	/** 
	 * Inserts a new row in the EMISOR table.
	 */
	public EmisorPk insert(Emisor dto) throws EmisorDaoException;

	/** 
	 * Updates a single row in the EMISOR table.
	 */
	public void update(EmisorPk pk, Emisor dto) throws EmisorDaoException;

	/** 
	 * Deletes a single row in the EMISOR table.
	 */
	public void delete(EmisorPk pk) throws EmisorDaoException;

	/** 
	 * Returns the rows from the EMISOR table that matches the specified primary-key value.
	 */
	public Emisor findByPrimaryKey(EmisorPk pk) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'IDEMISOR = :idemisor'.
	 */
	public Emisor findByPrimaryKey(int idemisor) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria ''.
	 */
	public Emisor[] findAll() throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'IDEMISOR = :idemisor'.
	 */
	public Emisor[] findWhereIdemisorEquals(int idemisor) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'RFC = :rfc'.
	 */
	public Emisor[] findWhereRfcEquals(String rfc) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'RAZONSOCIAL = :razonsocial'.
	 */
	public Emisor[] findWhereRazonsocialEquals(String razonsocial) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'NOMBRECOMERCIAL = :nombrecomercial'.
	 */
	public Emisor[] findWhereNombrecomercialEquals(String nombrecomercial) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'REGIMENFISCAL = :regimenfiscal'.
	 */
	public Emisor[] findWhereRegimenfiscalEquals(String regimenfiscal) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'ESTATUS = :estatus'.
	 */
	public Emisor[] findWhereEstatusEquals(int estatus) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'REGISTROPATRONAL = :registropatronal'.
	 */
	public Emisor[] findWhereRegistropatronalEquals(String registropatronal) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'PLANTILLACOMPROBANTE = :plantillacomprobante'.
	 */
	public Emisor[] findWherePlantillacomprobanteEquals(String plantillacomprobante) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'RUTALOGO = :rutalogo'.
	 */
	public Emisor[] findWhereRutalogoEquals(String rutalogo) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'RUTACER = :rutacer'.
	 */
	public Emisor[] findWhereRutacerEquals(String rutacer) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'RUTAKEY = :rutakey'.
	 */
	public Emisor[] findWhereRutakeyEquals(String rutakey) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'EMISORPASS = :emisorpass'.
	 */
	public Emisor[] findWhereEmisorpassEquals(String emisorpass) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'PLANTILLANOMINA = :plantillanomina'.
	 */
	public Emisor[] findWherePlantillanominaEquals(String plantillanomina) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'PLANTILLA_RETENCIONES = :plantillaRetenciones'.
	 */
	public Emisor[] findWherePlantillaRetencionesEquals(String plantillaRetenciones) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the criteria 'SECTOR_PRIMARIO = :sectorPrimario'.
	 */
	public Emisor[] findWhereSectorPrimarioEquals(int sectorPrimario) throws EmisorDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the EMISOR table that match the specified arbitrary SQL statement
	 */
	public Emisor[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmisorDaoException;

	/** 
	 * Returns all rows from the EMISOR table that match the specified arbitrary SQL statement
	 */
	public Emisor[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmisorDaoException;

}
