/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.fens.desktopMonitor.dao;

import com.fens.desktopMonitor.dto.*;
import com.fens.desktopMonitor.exceptions.*;

public interface ConfiguracionDao
{
	/** 
	 * Inserts a new row in the CONFIGURACION table.
	 */
	public ConfiguracionPk insert(Configuracion dto) throws ConfiguracionDaoException;

	/** 
	 * Updates a single row in the CONFIGURACION table.
	 */
	public void update(ConfiguracionPk pk, Configuracion dto) throws ConfiguracionDaoException;

	/** 
	 * Deletes a single row in the CONFIGURACION table.
	 */
	public void delete(ConfiguracionPk pk) throws ConfiguracionDaoException;

	/** 
	 * Returns the rows from the CONFIGURACION table that matches the specified primary-key value.
	 */
	public Configuracion findByPrimaryKey(ConfiguracionPk pk) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'IDCONFIFURACION = :idconfifuracion'.
	 */
	public Configuracion findByPrimaryKey(int idconfifuracion) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria ''.
	 */
	public Configuracion[] findAll() throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'IDCONFIFURACION = :idconfifuracion'.
	 */
	public Configuracion[] findWhereIdconfifuracionEquals(int idconfifuracion) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTAORIGENPROCESAR = :rutaorigenprocesar'.
	 */
	public Configuracion[] findWhereRutaorigenprocesarEquals(String rutaorigenprocesar) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTACARPETAEJECUCION = :rutacarpetaejecucion'.
	 */
	public Configuracion[] findWhereRutacarpetaejecucionEquals(String rutacarpetaejecucion) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTACARPETAERRORES = :rutacarpetaerrores'.
	 */
	public Configuracion[] findWhereRutacarpetaerroresEquals(String rutacarpetaerrores) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTACARPETAEXITOSOS = :rutacarpetaexitosos'.
	 */
	public Configuracion[] findWhereRutacarpetaexitososEquals(String rutacarpetaexitosos) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTAORIGENCANCELACIONESXML = :rutaorigencancelacionesxml'.
	 */
	public Configuracion[] findWhereRutaorigencancelacionesxmlEquals(String rutaorigencancelacionesxml) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTADESTINOCANCELACIONESXML = :rutadestinocancelacionesxml'.
	 */
	public Configuracion[] findWhereRutadestinocancelacionesxmlEquals(String rutadestinocancelacionesxml) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RENAMEARCHIVOSTIMBRADOS = :renamearchivostimbrados'.
	 */
	public Configuracion[] findWhereRenamearchivostimbradosEquals(String renamearchivostimbrados) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'LIGAPAC = :ligapac'.
	 */
	public Configuracion[] findWhereLigapacEquals(String ligapac) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'USUARIOPAC = :usuariopac'.
	 */
	public Configuracion[] findWhereUsuariopacEquals(String usuariopac) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'PASSPAC = :passpac'.
	 */
	public Configuracion[] findWherePasspacEquals(String passpac) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'MINUTOSDEMON = :minutosdemon'.
	 */
	public Configuracion[] findWhereMinutosdemonEquals(int minutosdemon) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'ENVIODECORREO = :enviodecorreo'.
	 */
	public Configuracion[] findWhereEnviodecorreoEquals(int enviodecorreo) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'CORREOREMITENTE = :correoremitente'.
	 */
	public Configuracion[] findWhereCorreoremitenteEquals(String correoremitente) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'USUARIOREMITENTE = :usuarioremitente'.
	 */
	public Configuracion[] findWhereUsuarioremitenteEquals(String usuarioremitente) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'DOMINIOSMTP = :dominiosmtp'.
	 */
	public Configuracion[] findWhereDominiosmtpEquals(String dominiosmtp) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'PUERTOSMTP = :puertosmtp'.
	 */
	public Configuracion[] findWherePuertosmtpEquals(int puertosmtp) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'PASSWORDCORREO = :passwordcorreo'.
	 */
	public Configuracion[] findWherePasswordcorreoEquals(String passwordcorreo) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'AUTENTICACIONSMTP = :autenticacionsmtp'.
	 */
	public Configuracion[] findWhereAutenticacionsmtpEquals(int autenticacionsmtp) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'DESTINATARIOSFIJOS = :destinatariosfijos'.
	 */
	public Configuracion[] findWhereDestinatariosfijosEquals(String destinatariosfijos) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'ASUNTOCORREO = :asuntocorreo'.
	 */
	public Configuracion[] findWhereAsuntocorreoEquals(String asuntocorreo) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'PLANTILLACORREO = :plantillacorreo'.
	 */
	public Configuracion[] findWherePlantillacorreoEquals(String plantillacorreo) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'ACTIVARIMPRESION = :activarimpresion'.
	 */
	public Configuracion[] findWhereActivarimpresionEquals(int activarimpresion) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'IMPRESORAPREDETERMINADA = :impresorapredeterminada'.
	 */
	public Configuracion[] findWhereImpresorapredeterminadaEquals(String impresorapredeterminada) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'ERROR_PAC_ULTIMA_CONN = :errorPacUltimaConn'.
	 */
	public Configuracion[] findWhereErrorPacUltimaConnEquals(int errorPacUltimaConn) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTA_EJECUTABLE_ADOBE_READER = :rutaEjecutableAdobeReader'.
	 */
	public Configuracion[] findWhereRutaEjecutableAdobeReaderEquals(String rutaEjecutableAdobeReader) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTA_CARPETA_ORIGEN_ECONTABILIDAD = :rutaCarpetaOrigenEcontabilidad'.
	 */
	public Configuracion[] findWhereRutaCarpetaOrigenEcontabilidadEquals(String rutaCarpetaOrigenEcontabilidad) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTA_CARPETA_DESTINO_ECONTABILIDAD = :rutaCarpetaDestinoEcontabilidad'.
	 */
	public Configuracion[] findWhereRutaCarpetaDestinoEcontabilidadEquals(String rutaCarpetaDestinoEcontabilidad) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'ORDEN_LECTURA_ARCHIVOS = :ordenLecturaArchivos'.
	 */
	public Configuracion[] findWhereOrdenLecturaArchivosEquals(int ordenLecturaArchivos) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'LOTE_PDF_CONCENTRADO = :lotePdfConcentrado'.
	 */
	public Configuracion[] findWhereLotePdfConcentradoEquals(int lotePdfConcentrado) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'LOTE_NOTIFICACIONES = :loteNotificaciones'.
	 */
	public Configuracion[] findWhereLoteNotificacionesEquals(int loteNotificaciones) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTA_CARPETA_ORIGEN_PAYPOINT = :rutaCarpetaOrigenPaypoint'.
	 */
	public Configuracion[] findWhereRutaCarpetaOrigenPaypointEquals(String rutaCarpetaOrigenPaypoint) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTA_CARPETA_DESTINO_PAYPOINT = :rutaCarpetaDestinoPaypoint'.
	 */
	public Configuracion[] findWhereRutaCarpetaDestinoPaypointEquals(String rutaCarpetaDestinoPaypoint) throws ConfiguracionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the CONFIGURACION table that match the specified arbitrary SQL statement
	 */
	public Configuracion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ConfiguracionDaoException;

	/** 
	 * Returns all rows from the CONFIGURACION table that match the specified arbitrary SQL statement
	 */
	public Configuracion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ConfiguracionDaoException;

}
