/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.fens.desktopMonitor.dao;

import java.util.Date;
import com.fens.desktopMonitor.dto.*;
import com.fens.desktopMonitor.exceptions.*;

public interface ArchivomaestroDao
{
	/** 
	 * Inserts a new row in the ARCHIVOMAESTRO table.
	 */
	public ArchivomaestroPk insert(Archivomaestro dto) throws ArchivomaestroDaoException;

	/** 
	 * Updates a single row in the ARCHIVOMAESTRO table.
	 */
	public void update(ArchivomaestroPk pk, Archivomaestro dto) throws ArchivomaestroDaoException;

	/** 
	 * Deletes a single row in the ARCHIVOMAESTRO table.
	 */
	public void delete(ArchivomaestroPk pk) throws ArchivomaestroDaoException;

	/** 
	 * Returns the rows from the ARCHIVOMAESTRO table that matches the specified primary-key value.
	 */
	public Archivomaestro findByPrimaryKey(ArchivomaestroPk pk) throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the criteria 'IDARCHIVOMAESTRO = :idarchivomaestro'.
	 */
	public Archivomaestro findByPrimaryKey(int idarchivomaestro) throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the criteria ''.
	 */
	public Archivomaestro[] findAll() throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the criteria 'IDARCHIVOMAESTRO = :idarchivomaestro'.
	 */
	public Archivomaestro[] findWhereIdarchivomaestroEquals(int idarchivomaestro) throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the criteria 'NOMBREARCHIVO = :nombrearchivo'.
	 */
	public Archivomaestro[] findWhereNombrearchivoEquals(String nombrearchivo) throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the criteria 'IDESTATUS = :idestatus'.
	 */
	public Archivomaestro[] findWhereIdestatusEquals(int idestatus) throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the criteria 'FECHACREACION = :fechacreacion'.
	 */
	public Archivomaestro[] findWhereFechacreacionEquals(Date fechacreacion) throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the criteria 'FECHAPROCESO = :fechaproceso'.
	 */
	public Archivomaestro[] findWhereFechaprocesoEquals(Date fechaproceso) throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the criteria 'NUMEROFACTURAS = :numerofacturas'.
	 */
	public Archivomaestro[] findWhereNumerofacturasEquals(int numerofacturas) throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the criteria 'TAMANOARCHIVO = :tamanoarchivo'.
	 */
	public Archivomaestro[] findWhereTamanoarchivoEquals(int tamanoarchivo) throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the criteria 'MD5_CHECKSUM = :md5Checksum'.
	 */
	public Archivomaestro[] findWhereMd5ChecksumEquals(String md5Checksum) throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the criteria 'OBSERVACIONES = :observaciones'.
	 */
	public Archivomaestro[] findWhereObservacionesEquals(String observaciones) throws ArchivomaestroDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the specified arbitrary SQL statement
	 */
	public Archivomaestro[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArchivomaestroDaoException;

	/** 
	 * Returns all rows from the ARCHIVOMAESTRO table that match the specified arbitrary SQL statement
	 */
	public Archivomaestro[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArchivomaestroDaoException;

}
