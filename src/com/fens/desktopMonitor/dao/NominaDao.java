/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.fens.desktopMonitor.dao;

import java.util.Date;
import com.fens.desktopMonitor.dto.*;
import com.fens.desktopMonitor.exceptions.*;

public interface NominaDao
{
	/** 
	 * Inserts a new row in the NOMINA table.
	 */
	public NominaPk insert(Nomina dto) throws NominaDaoException;

	/** 
	 * Updates a single row in the NOMINA table.
	 */
	public void update(NominaPk pk, Nomina dto) throws NominaDaoException;

	/** 
	 * Deletes a single row in the NOMINA table.
	 */
	public void delete(NominaPk pk) throws NominaDaoException;

	/** 
	 * Returns the rows from the NOMINA table that matches the specified primary-key value.
	 */
	public Nomina findByPrimaryKey(NominaPk pk) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'IDNOMINA = :idnomina'.
	 */
	public Nomina findByPrimaryKey(int idnomina) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria ''.
	 */
	public Nomina[] findAll() throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'IDNOMINA = :idnomina'.
	 */
	public Nomina[] findWhereIdnominaEquals(int idnomina) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'IDCOMPROBANTEFISCAL = :idcomprobantefiscal'.
	 */
	public Nomina[] findWhereIdcomprobantefiscalEquals(int idcomprobantefiscal) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'NUM_EMPLEADO = :numEmpleado'.
	 */
	public Nomina[] findWhereNumEmpleadoEquals(String numEmpleado) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'FECHA_PAGO = :fechaPago'.
	 */
	public Nomina[] findWhereFechaPagoEquals(Date fechaPago) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'FECHA_INICIAL_PAGO = :fechaInicialPago'.
	 */
	public Nomina[] findWhereFechaInicialPagoEquals(Date fechaInicialPago) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'FECHA_FIN_PAGO = :fechaFinPago'.
	 */
	public Nomina[] findWhereFechaFinPagoEquals(Date fechaFinPago) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'DEPARTAMENTO = :departamento'.
	 */
	public Nomina[] findWhereDepartamentoEquals(String departamento) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'NOMBRE_EMPLEADO = :nombreEmpleado'.
	 */
	public Nomina[] findWhereNombreEmpleadoEquals(String nombreEmpleado) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'PUESTO = :puesto'.
	 */
	public Nomina[] findWherePuestoEquals(String puesto) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'NUM_DIAS_PAGADOS = :numDiasPagados'.
	 */
	public Nomina[] findWhereNumDiasPagadosEquals(double numDiasPagados) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'TOTAL_PERCEPCION_EXENTAS = :totalPercepcionExentas'.
	 */
	public Nomina[] findWhereTotalPercepcionExentasEquals(double totalPercepcionExentas) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'TOTAL_PERCEPCION_GRAVADAS = :totalPercepcionGravadas'.
	 */
	public Nomina[] findWhereTotalPercepcionGravadasEquals(double totalPercepcionGravadas) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'TOTAL_DEDUCCION_EXENTAS = :totalDeduccionExentas'.
	 */
	public Nomina[] findWhereTotalDeduccionExentasEquals(double totalDeduccionExentas) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'TOTAL_DEDUCCION_GRAVADAS = :totalDeduccionGravadas'.
	 */
	public Nomina[] findWhereTotalDeduccionGravadasEquals(double totalDeduccionGravadas) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'TOTAL_INCAPACIDAD_DESCUENTO = :totalIncapacidadDescuento'.
	 */
	public Nomina[] findWhereTotalIncapacidadDescuentoEquals(double totalIncapacidadDescuento) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'TOTAL_HREXTRA_DOBLE_HR = :totalHrextraDobleHr'.
	 */
	public Nomina[] findWhereTotalHrextraDobleHrEquals(double totalHrextraDobleHr) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'TOTAL_HREXTRA_DOBLE_IMP = :totalHrextraDobleImp'.
	 */
	public Nomina[] findWhereTotalHrextraDobleImpEquals(double totalHrextraDobleImp) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'TOTAL_HREXTRA_TRIPLE_HR = :totalHrextraTripleHr'.
	 */
	public Nomina[] findWhereTotalHrextraTripleHrEquals(double totalHrextraTripleHr) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the criteria 'TOTAL_HREXTRA_TRIPLE_IMP = :totalHrextraTripleImp'.
	 */
	public Nomina[] findWhereTotalHrextraTripleImpEquals(double totalHrextraTripleImp) throws NominaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the NOMINA table that match the specified arbitrary SQL statement
	 */
	public Nomina[] findByDynamicSelect(String sql, Object[] sqlParams) throws NominaDaoException;

	/** 
	 * Returns all rows from the NOMINA table that match the specified arbitrary SQL statement
	 */
	public Nomina[] findByDynamicWhere(String sql, Object[] sqlParams) throws NominaDaoException;

}
