/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.fens.desktopMonitor.dao;

import com.fens.desktopMonitor.dto.*;
import com.fens.desktopMonitor.exceptions.*;

public interface UbicacionfiscalDao
{
	/** 
	 * Inserts a new row in the UBICACIONFISCAL table.
	 */
	public UbicacionfiscalPk insert(Ubicacionfiscal dto) throws UbicacionfiscalDaoException;

	/** 
	 * Updates a single row in the UBICACIONFISCAL table.
	 */
	public void update(UbicacionfiscalPk pk, Ubicacionfiscal dto) throws UbicacionfiscalDaoException;

	/** 
	 * Deletes a single row in the UBICACIONFISCAL table.
	 */
	public void delete(UbicacionfiscalPk pk) throws UbicacionfiscalDaoException;

	/** 
	 * Returns the rows from the UBICACIONFISCAL table that matches the specified primary-key value.
	 */
	public Ubicacionfiscal findByPrimaryKey(UbicacionfiscalPk pk) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'IDUBICACIONFISCAL = :idubicacionfiscal'.
	 */
	public Ubicacionfiscal findByPrimaryKey(int idubicacionfiscal) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria ''.
	 */
	public Ubicacionfiscal[] findAll() throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'IDEMISOR = :idemisor'.
	 */
	public Ubicacionfiscal[] findByEmisor(int idemisor) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'IDUBICACIONFISCAL = :idubicacionfiscal'.
	 */
	public Ubicacionfiscal[] findWhereIdubicacionfiscalEquals(int idubicacionfiscal) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'IDEMISOR = :idemisor'.
	 */
	public Ubicacionfiscal[] findWhereIdemisorEquals(int idemisor) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'CALLE = :calle'.
	 */
	public Ubicacionfiscal[] findWhereCalleEquals(String calle) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'NUMINT = :numint'.
	 */
	public Ubicacionfiscal[] findWhereNumintEquals(String numint) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'NUMEXT = :numext'.
	 */
	public Ubicacionfiscal[] findWhereNumextEquals(String numext) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'COLONIA = :colonia'.
	 */
	public Ubicacionfiscal[] findWhereColoniaEquals(String colonia) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'CODIGOPOSTAL = :codigopostal'.
	 */
	public Ubicacionfiscal[] findWhereCodigopostalEquals(String codigopostal) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'PAIS = :pais'.
	 */
	public Ubicacionfiscal[] findWherePaisEquals(String pais) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'ESTADO = :estado'.
	 */
	public Ubicacionfiscal[] findWhereEstadoEquals(String estado) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the criteria 'MUNICIPIO = :municipio'.
	 */
	public Ubicacionfiscal[] findWhereMunicipioEquals(String municipio) throws UbicacionfiscalDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the specified arbitrary SQL statement
	 */
	public Ubicacionfiscal[] findByDynamicSelect(String sql, Object[] sqlParams) throws UbicacionfiscalDaoException;

	/** 
	 * Returns all rows from the UBICACIONFISCAL table that match the specified arbitrary SQL statement
	 */
	public Ubicacionfiscal[] findByDynamicWhere(String sql, Object[] sqlParams) throws UbicacionfiscalDaoException;

}
