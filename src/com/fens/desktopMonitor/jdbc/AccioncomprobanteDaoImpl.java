/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.fens.desktopMonitor.jdbc;

import com.fens.desktopMonitor.dao.*;
import com.fens.desktopMonitor.factory.*;
import com.fens.desktopMonitor.dto.*;
import com.fens.desktopMonitor.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class AccioncomprobanteDaoImpl extends AbstractDAO implements AccioncomprobanteDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_ACCION_COMPROBANTE, CLAVE_ACCION, CODIGO_POSTAL_AUTO, ACTIVAR_COPIA_ARCHIVO, RUTA_COPIA_ARCHIVO, ACTIVAR_CORREO, CORREO_DESTINATARIOS, ACTIVAR_IMPRESION, NOMBRE_IMPRESORA, PLANTILLA_FACTURA, PLANTILLA_NOMINA, RUTA_LOGO, ACTIVAR_SOPORTE_ADOBE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( CLAVE_ACCION, CODIGO_POSTAL_AUTO, ACTIVAR_COPIA_ARCHIVO, RUTA_COPIA_ARCHIVO, ACTIVAR_CORREO, CORREO_DESTINATARIOS, ACTIVAR_IMPRESION, NOMBRE_IMPRESORA, PLANTILLA_FACTURA, PLANTILLA_NOMINA, RUTA_LOGO, ACTIVAR_SOPORTE_ADOBE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET CLAVE_ACCION = ?, CODIGO_POSTAL_AUTO = ?, ACTIVAR_COPIA_ARCHIVO = ?, RUTA_COPIA_ARCHIVO = ?, ACTIVAR_CORREO = ?, CORREO_DESTINATARIOS = ?, ACTIVAR_IMPRESION = ?, NOMBRE_IMPRESORA = ?, PLANTILLA_FACTURA = ?, PLANTILLA_NOMINA = ?, RUTA_LOGO = ?, ACTIVAR_SOPORTE_ADOBE = ? WHERE ID_ACCION_COMPROBANTE = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_ACCION_COMPROBANTE = ?";

	/** 
	 * Index of column ID_ACCION_COMPROBANTE
	 */
	protected static final int COLUMN_ID_ACCION_COMPROBANTE = 1;

	/** 
	 * Index of column CLAVE_ACCION
	 */
	protected static final int COLUMN_CLAVE_ACCION = 2;

	/** 
	 * Index of column CODIGO_POSTAL_AUTO
	 */
	protected static final int COLUMN_CODIGO_POSTAL_AUTO = 3;

	/** 
	 * Index of column ACTIVAR_COPIA_ARCHIVO
	 */
	protected static final int COLUMN_ACTIVAR_COPIA_ARCHIVO = 4;

	/** 
	 * Index of column RUTA_COPIA_ARCHIVO
	 */
	protected static final int COLUMN_RUTA_COPIA_ARCHIVO = 5;

	/** 
	 * Index of column ACTIVAR_CORREO
	 */
	protected static final int COLUMN_ACTIVAR_CORREO = 6;

	/** 
	 * Index of column CORREO_DESTINATARIOS
	 */
	protected static final int COLUMN_CORREO_DESTINATARIOS = 7;

	/** 
	 * Index of column ACTIVAR_IMPRESION
	 */
	protected static final int COLUMN_ACTIVAR_IMPRESION = 8;

	/** 
	 * Index of column NOMBRE_IMPRESORA
	 */
	protected static final int COLUMN_NOMBRE_IMPRESORA = 9;

	/** 
	 * Index of column PLANTILLA_FACTURA
	 */
	protected static final int COLUMN_PLANTILLA_FACTURA = 10;

	/** 
	 * Index of column PLANTILLA_NOMINA
	 */
	protected static final int COLUMN_PLANTILLA_NOMINA = 11;

	/** 
	 * Index of column RUTA_LOGO
	 */
	protected static final int COLUMN_RUTA_LOGO = 12;

	/** 
	 * Index of column ACTIVAR_SOPORTE_ADOBE
	 */
	protected static final int COLUMN_ACTIVAR_SOPORTE_ADOBE = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column ID_ACCION_COMPROBANTE
	 */
	protected static final int PK_COLUMN_ID_ACCION_COMPROBANTE = 1;

	/** 
	 * Inserts a new row in the ACCIONCOMPROBANTE table.
	 */
	public AccioncomprobantePk insert(Accioncomprobante dto) throws AccioncomprobanteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isClaveAccionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CLAVE_ACCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCodigoPostalAutoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CODIGO_POSTAL_AUTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isActivarCopiaArchivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACTIVAR_COPIA_ARCHIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutaCopiaArchivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTA_COPIA_ARCHIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isActivarCorreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACTIVAR_CORREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCorreoDestinatariosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CORREO_DESTINATARIOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isActivarImpresionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACTIVAR_IMPRESION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreImpresoraModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_IMPRESORA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPlantillaFacturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PLANTILLA_FACTURA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPlantillaNominaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PLANTILLA_NOMINA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutaLogoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTA_LOGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isActivarSoporteAdobeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACTIVAR_SOPORTE_ADOBE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isClaveAccionModified()) {
				stmt.setString( index++, dto.getClaveAccion() );
			}
		
			if (dto.isCodigoPostalAutoModified()) {
				stmt.setString( index++, dto.getCodigoPostalAuto() );
			}
		
			if (dto.isActivarCopiaArchivoModified()) {
				stmt.setInt( index++, dto.getActivarCopiaArchivo() );
			}
		
			if (dto.isRutaCopiaArchivoModified()) {
				stmt.setString( index++, dto.getRutaCopiaArchivo() );
			}
		
			if (dto.isActivarCorreoModified()) {
				stmt.setInt( index++, dto.getActivarCorreo() );
			}
		
			if (dto.isCorreoDestinatariosModified()) {
				stmt.setString( index++, dto.getCorreoDestinatarios() );
			}
		
			if (dto.isActivarImpresionModified()) {
				stmt.setInt( index++, dto.getActivarImpresion() );
			}
		
			if (dto.isNombreImpresoraModified()) {
				stmt.setString( index++, dto.getNombreImpresora() );
			}
		
			if (dto.isPlantillaFacturaModified()) {
				stmt.setString( index++, dto.getPlantillaFactura() );
			}
		
			if (dto.isPlantillaNominaModified()) {
				stmt.setString( index++, dto.getPlantillaNomina() );
			}
		
			if (dto.isRutaLogoModified()) {
				stmt.setString( index++, dto.getRutaLogo() );
			}
		
			if (dto.isActivarSoporteAdobeModified()) {
				stmt.setInt( index++, dto.getActivarSoporteAdobe() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdAccionComprobante( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AccioncomprobanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ACCIONCOMPROBANTE table.
	 */
	public void update(AccioncomprobantePk pk, Accioncomprobante dto) throws AccioncomprobanteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isClaveAccionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CLAVE_ACCION=?" );
				modified=true;
			}
		
			if (dto.isCodigoPostalAutoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CODIGO_POSTAL_AUTO=?" );
				modified=true;
			}
		
			if (dto.isActivarCopiaArchivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACTIVAR_COPIA_ARCHIVO=?" );
				modified=true;
			}
		
			if (dto.isRutaCopiaArchivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTA_COPIA_ARCHIVO=?" );
				modified=true;
			}
		
			if (dto.isActivarCorreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACTIVAR_CORREO=?" );
				modified=true;
			}
		
			if (dto.isCorreoDestinatariosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CORREO_DESTINATARIOS=?" );
				modified=true;
			}
		
			if (dto.isActivarImpresionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACTIVAR_IMPRESION=?" );
				modified=true;
			}
		
			if (dto.isNombreImpresoraModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_IMPRESORA=?" );
				modified=true;
			}
		
			if (dto.isPlantillaFacturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PLANTILLA_FACTURA=?" );
				modified=true;
			}
		
			if (dto.isPlantillaNominaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PLANTILLA_NOMINA=?" );
				modified=true;
			}
		
			if (dto.isRutaLogoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTA_LOGO=?" );
				modified=true;
			}
		
			if (dto.isActivarSoporteAdobeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACTIVAR_SOPORTE_ADOBE=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_ACCION_COMPROBANTE=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdAccionComprobanteModified()) {
				stmt.setInt( index++, dto.getIdAccionComprobante() );
			}
		
			if (dto.isClaveAccionModified()) {
				stmt.setString( index++, dto.getClaveAccion() );
			}
		
			if (dto.isCodigoPostalAutoModified()) {
				stmt.setString( index++, dto.getCodigoPostalAuto() );
			}
		
			if (dto.isActivarCopiaArchivoModified()) {
				stmt.setInt( index++, dto.getActivarCopiaArchivo() );
			}
		
			if (dto.isRutaCopiaArchivoModified()) {
				stmt.setString( index++, dto.getRutaCopiaArchivo() );
			}
		
			if (dto.isActivarCorreoModified()) {
				stmt.setInt( index++, dto.getActivarCorreo() );
			}
		
			if (dto.isCorreoDestinatariosModified()) {
				stmt.setString( index++, dto.getCorreoDestinatarios() );
			}
		
			if (dto.isActivarImpresionModified()) {
				stmt.setInt( index++, dto.getActivarImpresion() );
			}
		
			if (dto.isNombreImpresoraModified()) {
				stmt.setString( index++, dto.getNombreImpresora() );
			}
		
			if (dto.isPlantillaFacturaModified()) {
				stmt.setString( index++, dto.getPlantillaFactura() );
			}
		
			if (dto.isPlantillaNominaModified()) {
				stmt.setString( index++, dto.getPlantillaNomina() );
			}
		
			if (dto.isRutaLogoModified()) {
				stmt.setString( index++, dto.getRutaLogo() );
			}
		
			if (dto.isActivarSoporteAdobeModified()) {
				stmt.setInt( index++, dto.getActivarSoporteAdobe() );
			}
		
			stmt.setInt( index++, pk.getIdAccionComprobante() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AccioncomprobanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ACCIONCOMPROBANTE table.
	 */
	public void delete(AccioncomprobantePk pk) throws AccioncomprobanteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdAccionComprobante() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AccioncomprobanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ACCIONCOMPROBANTE table that matches the specified primary-key value.
	 */
	public Accioncomprobante findByPrimaryKey(AccioncomprobantePk pk) throws AccioncomprobanteDaoException
	{
		return findByPrimaryKey( pk.getIdAccionComprobante() );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ID_ACCION_COMPROBANTE = :idAccionComprobante'.
	 */
	public Accioncomprobante findByPrimaryKey(int idAccionComprobante) throws AccioncomprobanteDaoException
	{
		Accioncomprobante ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_ACCION_COMPROBANTE = ?", new Object[] {  new Integer(idAccionComprobante) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria ''.
	 */
	public Accioncomprobante[] findAll() throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_ACCION_COMPROBANTE", null );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ID_ACCION_COMPROBANTE = :idAccionComprobante'.
	 */
	public Accioncomprobante[] findWhereIdAccionComprobanteEquals(int idAccionComprobante) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ACCION_COMPROBANTE = ? ORDER BY ID_ACCION_COMPROBANTE", new Object[] {  new Integer(idAccionComprobante) } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'CLAVE_ACCION = :claveAccion'.
	 */
	public Accioncomprobante[] findWhereClaveAccionEquals(String claveAccion) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLAVE_ACCION = ? ORDER BY CLAVE_ACCION", new Object[] { claveAccion } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'CODIGO_POSTAL_AUTO = :codigoPostalAuto'.
	 */
	public Accioncomprobante[] findWhereCodigoPostalAutoEquals(String codigoPostalAuto) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO_POSTAL_AUTO = ? ORDER BY CODIGO_POSTAL_AUTO", new Object[] { codigoPostalAuto } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ACTIVAR_COPIA_ARCHIVO = :activarCopiaArchivo'.
	 */
	public Accioncomprobante[] findWhereActivarCopiaArchivoEquals(int activarCopiaArchivo) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVAR_COPIA_ARCHIVO = ? ORDER BY ACTIVAR_COPIA_ARCHIVO", new Object[] {  new Integer(activarCopiaArchivo) } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'RUTA_COPIA_ARCHIVO = :rutaCopiaArchivo'.
	 */
	public Accioncomprobante[] findWhereRutaCopiaArchivoEquals(String rutaCopiaArchivo) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTA_COPIA_ARCHIVO = ? ORDER BY RUTA_COPIA_ARCHIVO", new Object[] { rutaCopiaArchivo } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ACTIVAR_CORREO = :activarCorreo'.
	 */
	public Accioncomprobante[] findWhereActivarCorreoEquals(int activarCorreo) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVAR_CORREO = ? ORDER BY ACTIVAR_CORREO", new Object[] {  new Integer(activarCorreo) } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'CORREO_DESTINATARIOS = :correoDestinatarios'.
	 */
	public Accioncomprobante[] findWhereCorreoDestinatariosEquals(String correoDestinatarios) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CORREO_DESTINATARIOS = ? ORDER BY CORREO_DESTINATARIOS", new Object[] { correoDestinatarios } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ACTIVAR_IMPRESION = :activarImpresion'.
	 */
	public Accioncomprobante[] findWhereActivarImpresionEquals(int activarImpresion) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVAR_IMPRESION = ? ORDER BY ACTIVAR_IMPRESION", new Object[] {  new Integer(activarImpresion) } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'NOMBRE_IMPRESORA = :nombreImpresora'.
	 */
	public Accioncomprobante[] findWhereNombreImpresoraEquals(String nombreImpresora) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_IMPRESORA = ? ORDER BY NOMBRE_IMPRESORA", new Object[] { nombreImpresora } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'PLANTILLA_FACTURA = :plantillaFactura'.
	 */
	public Accioncomprobante[] findWherePlantillaFacturaEquals(String plantillaFactura) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PLANTILLA_FACTURA = ? ORDER BY PLANTILLA_FACTURA", new Object[] { plantillaFactura } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'PLANTILLA_NOMINA = :plantillaNomina'.
	 */
	public Accioncomprobante[] findWherePlantillaNominaEquals(String plantillaNomina) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PLANTILLA_NOMINA = ? ORDER BY PLANTILLA_NOMINA", new Object[] { plantillaNomina } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'RUTA_LOGO = :rutaLogo'.
	 */
	public Accioncomprobante[] findWhereRutaLogoEquals(String rutaLogo) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTA_LOGO = ? ORDER BY RUTA_LOGO", new Object[] { rutaLogo } );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the criteria 'ACTIVAR_SOPORTE_ADOBE = :activarSoporteAdobe'.
	 */
	public Accioncomprobante[] findWhereActivarSoporteAdobeEquals(int activarSoporteAdobe) throws AccioncomprobanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVAR_SOPORTE_ADOBE = ? ORDER BY ACTIVAR_SOPORTE_ADOBE", new Object[] {  new Integer(activarSoporteAdobe) } );
	}

	/**
	 * Method 'AccioncomprobanteDaoImpl'
	 * 
	 */
	public AccioncomprobanteDaoImpl()
	{
	}

	/**
	 * Method 'AccioncomprobanteDaoImpl'
	 * 
	 * @param userConn
	 */
	public AccioncomprobanteDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "ACCIONCOMPROBANTE";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Accioncomprobante fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Accioncomprobante dto = new Accioncomprobante();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Accioncomprobante[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Accioncomprobante dto = new Accioncomprobante();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Accioncomprobante ret[] = new Accioncomprobante[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Accioncomprobante dto, ResultSet rs) throws SQLException
	{
		dto.setIdAccionComprobante( rs.getInt( COLUMN_ID_ACCION_COMPROBANTE ) );
		dto.setClaveAccion( rs.getString( COLUMN_CLAVE_ACCION ) );
		dto.setCodigoPostalAuto( rs.getString( COLUMN_CODIGO_POSTAL_AUTO ) );
		dto.setActivarCopiaArchivo( rs.getInt( COLUMN_ACTIVAR_COPIA_ARCHIVO ) );
		dto.setRutaCopiaArchivo( rs.getString( COLUMN_RUTA_COPIA_ARCHIVO ) );
		dto.setActivarCorreo( rs.getInt( COLUMN_ACTIVAR_CORREO ) );
		dto.setCorreoDestinatarios( rs.getString( COLUMN_CORREO_DESTINATARIOS ) );
		dto.setActivarImpresion( rs.getInt( COLUMN_ACTIVAR_IMPRESION ) );
		dto.setNombreImpresora( rs.getString( COLUMN_NOMBRE_IMPRESORA ) );
		dto.setPlantillaFactura( rs.getString( COLUMN_PLANTILLA_FACTURA ) );
		dto.setPlantillaNomina( rs.getString( COLUMN_PLANTILLA_NOMINA ) );
		dto.setRutaLogo( rs.getString( COLUMN_RUTA_LOGO ) );
		dto.setActivarSoporteAdobe( rs.getInt( COLUMN_ACTIVAR_SOPORTE_ADOBE ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Accioncomprobante dto)
	{
		dto.setIdAccionComprobanteModified( false );
		dto.setClaveAccionModified( false );
		dto.setCodigoPostalAutoModified( false );
		dto.setActivarCopiaArchivoModified( false );
		dto.setRutaCopiaArchivoModified( false );
		dto.setActivarCorreoModified( false );
		dto.setCorreoDestinatariosModified( false );
		dto.setActivarImpresionModified( false );
		dto.setNombreImpresoraModified( false );
		dto.setPlantillaFacturaModified( false );
		dto.setPlantillaNominaModified( false );
		dto.setRutaLogoModified( false );
		dto.setActivarSoporteAdobeModified( false );
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the specified arbitrary SQL statement
	 */
	public Accioncomprobante[] findByDynamicSelect(String sql, Object[] sqlParams) throws AccioncomprobanteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AccioncomprobanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ACCIONCOMPROBANTE table that match the specified arbitrary SQL statement
	 */
	public Accioncomprobante[] findByDynamicWhere(String sql, Object[] sqlParams) throws AccioncomprobanteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AccioncomprobanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
