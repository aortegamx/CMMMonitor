/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.fens.desktopMonitor.jdbc;

import com.fens.desktopMonitor.dao.*;
import com.fens.desktopMonitor.factory.*;
import com.fens.desktopMonitor.dto.*;
import com.fens.desktopMonitor.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ConfiguracionDaoImpl extends AbstractDAO implements ConfiguracionDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDCONFIFURACION, RUTAORIGENPROCESAR, RUTACARPETAEJECUCION, RUTACARPETAERRORES, RUTACARPETAEXITOSOS, RUTAORIGENCANCELACIONESXML, RUTADESTINOCANCELACIONESXML, RENAMEARCHIVOSTIMBRADOS, LIGAPAC, USUARIOPAC, PASSPAC, MINUTOSDEMON, ENVIODECORREO, CORREOREMITENTE, USUARIOREMITENTE, DOMINIOSMTP, PUERTOSMTP, PASSWORDCORREO, AUTENTICACIONSMTP, DESTINATARIOSFIJOS, ASUNTOCORREO, PLANTILLACORREO, ACTIVARIMPRESION, IMPRESORAPREDETERMINADA, ERROR_PAC_ULTIMA_CONN, RUTA_EJECUTABLE_ADOBE_READER, RUTA_CARPETA_ORIGEN_ECONTABILIDAD, RUTA_CARPETA_DESTINO_ECONTABILIDAD, ORDEN_LECTURA_ARCHIVOS, LOTE_PDF_CONCENTRADO, LOTE_NOTIFICACIONES, RUTA_CARPETA_ORIGEN_PAYPOINT, RUTA_CARPETA_DESTINO_PAYPOINT FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDCONFIFURACION, RUTAORIGENPROCESAR, RUTACARPETAEJECUCION, RUTACARPETAERRORES, RUTACARPETAEXITOSOS, RUTAORIGENCANCELACIONESXML, RUTADESTINOCANCELACIONESXML, RENAMEARCHIVOSTIMBRADOS, LIGAPAC, USUARIOPAC, PASSPAC, MINUTOSDEMON, ENVIODECORREO, CORREOREMITENTE, USUARIOREMITENTE, DOMINIOSMTP, PUERTOSMTP, PASSWORDCORREO, AUTENTICACIONSMTP, DESTINATARIOSFIJOS, ASUNTOCORREO, PLANTILLACORREO, ACTIVARIMPRESION, IMPRESORAPREDETERMINADA, ERROR_PAC_ULTIMA_CONN, RUTA_EJECUTABLE_ADOBE_READER, RUTA_CARPETA_ORIGEN_ECONTABILIDAD, RUTA_CARPETA_DESTINO_ECONTABILIDAD, ORDEN_LECTURA_ARCHIVOS, LOTE_PDF_CONCENTRADO, LOTE_NOTIFICACIONES, RUTA_CARPETA_ORIGEN_PAYPOINT, RUTA_CARPETA_DESTINO_PAYPOINT ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDCONFIFURACION = ?, RUTAORIGENPROCESAR = ?, RUTACARPETAEJECUCION = ?, RUTACARPETAERRORES = ?, RUTACARPETAEXITOSOS = ?, RUTAORIGENCANCELACIONESXML = ?, RUTADESTINOCANCELACIONESXML = ?, RENAMEARCHIVOSTIMBRADOS = ?, LIGAPAC = ?, USUARIOPAC = ?, PASSPAC = ?, MINUTOSDEMON = ?, ENVIODECORREO = ?, CORREOREMITENTE = ?, USUARIOREMITENTE = ?, DOMINIOSMTP = ?, PUERTOSMTP = ?, PASSWORDCORREO = ?, AUTENTICACIONSMTP = ?, DESTINATARIOSFIJOS = ?, ASUNTOCORREO = ?, PLANTILLACORREO = ?, ACTIVARIMPRESION = ?, IMPRESORAPREDETERMINADA = ?, ERROR_PAC_ULTIMA_CONN = ?, RUTA_EJECUTABLE_ADOBE_READER = ?, RUTA_CARPETA_ORIGEN_ECONTABILIDAD = ?, RUTA_CARPETA_DESTINO_ECONTABILIDAD = ?, ORDEN_LECTURA_ARCHIVOS = ?, LOTE_PDF_CONCENTRADO = ?, LOTE_NOTIFICACIONES = ?, RUTA_CARPETA_ORIGEN_PAYPOINT = ?, RUTA_CARPETA_DESTINO_PAYPOINT = ? WHERE IDCONFIFURACION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDCONFIFURACION = ?";

	/** 
	 * Index of column IDCONFIFURACION
	 */
	protected static final int COLUMN_IDCONFIFURACION = 1;

	/** 
	 * Index of column RUTAORIGENPROCESAR
	 */
	protected static final int COLUMN_RUTAORIGENPROCESAR = 2;

	/** 
	 * Index of column RUTACARPETAEJECUCION
	 */
	protected static final int COLUMN_RUTACARPETAEJECUCION = 3;

	/** 
	 * Index of column RUTACARPETAERRORES
	 */
	protected static final int COLUMN_RUTACARPETAERRORES = 4;

	/** 
	 * Index of column RUTACARPETAEXITOSOS
	 */
	protected static final int COLUMN_RUTACARPETAEXITOSOS = 5;

	/** 
	 * Index of column RUTAORIGENCANCELACIONESXML
	 */
	protected static final int COLUMN_RUTAORIGENCANCELACIONESXML = 6;

	/** 
	 * Index of column RUTADESTINOCANCELACIONESXML
	 */
	protected static final int COLUMN_RUTADESTINOCANCELACIONESXML = 7;

	/** 
	 * Index of column RENAMEARCHIVOSTIMBRADOS
	 */
	protected static final int COLUMN_RENAMEARCHIVOSTIMBRADOS = 8;

	/** 
	 * Index of column LIGAPAC
	 */
	protected static final int COLUMN_LIGAPAC = 9;

	/** 
	 * Index of column USUARIOPAC
	 */
	protected static final int COLUMN_USUARIOPAC = 10;

	/** 
	 * Index of column PASSPAC
	 */
	protected static final int COLUMN_PASSPAC = 11;

	/** 
	 * Index of column MINUTOSDEMON
	 */
	protected static final int COLUMN_MINUTOSDEMON = 12;

	/** 
	 * Index of column ENVIODECORREO
	 */
	protected static final int COLUMN_ENVIODECORREO = 13;

	/** 
	 * Index of column CORREOREMITENTE
	 */
	protected static final int COLUMN_CORREOREMITENTE = 14;

	/** 
	 * Index of column USUARIOREMITENTE
	 */
	protected static final int COLUMN_USUARIOREMITENTE = 15;

	/** 
	 * Index of column DOMINIOSMTP
	 */
	protected static final int COLUMN_DOMINIOSMTP = 16;

	/** 
	 * Index of column PUERTOSMTP
	 */
	protected static final int COLUMN_PUERTOSMTP = 17;

	/** 
	 * Index of column PASSWORDCORREO
	 */
	protected static final int COLUMN_PASSWORDCORREO = 18;

	/** 
	 * Index of column AUTENTICACIONSMTP
	 */
	protected static final int COLUMN_AUTENTICACIONSMTP = 19;

	/** 
	 * Index of column DESTINATARIOSFIJOS
	 */
	protected static final int COLUMN_DESTINATARIOSFIJOS = 20;

	/** 
	 * Index of column ASUNTOCORREO
	 */
	protected static final int COLUMN_ASUNTOCORREO = 21;

	/** 
	 * Index of column PLANTILLACORREO
	 */
	protected static final int COLUMN_PLANTILLACORREO = 22;

	/** 
	 * Index of column ACTIVARIMPRESION
	 */
	protected static final int COLUMN_ACTIVARIMPRESION = 23;

	/** 
	 * Index of column IMPRESORAPREDETERMINADA
	 */
	protected static final int COLUMN_IMPRESORAPREDETERMINADA = 24;

	/** 
	 * Index of column ERROR_PAC_ULTIMA_CONN
	 */
	protected static final int COLUMN_ERROR_PAC_ULTIMA_CONN = 25;

	/** 
	 * Index of column RUTA_EJECUTABLE_ADOBE_READER
	 */
	protected static final int COLUMN_RUTA_EJECUTABLE_ADOBE_READER = 26;

	/** 
	 * Index of column RUTA_CARPETA_ORIGEN_ECONTABILIDAD
	 */
	protected static final int COLUMN_RUTA_CARPETA_ORIGEN_ECONTABILIDAD = 27;

	/** 
	 * Index of column RUTA_CARPETA_DESTINO_ECONTABILIDAD
	 */
	protected static final int COLUMN_RUTA_CARPETA_DESTINO_ECONTABILIDAD = 28;

	/** 
	 * Index of column ORDEN_LECTURA_ARCHIVOS
	 */
	protected static final int COLUMN_ORDEN_LECTURA_ARCHIVOS = 29;

	/** 
	 * Index of column LOTE_PDF_CONCENTRADO
	 */
	protected static final int COLUMN_LOTE_PDF_CONCENTRADO = 30;

	/** 
	 * Index of column LOTE_NOTIFICACIONES
	 */
	protected static final int COLUMN_LOTE_NOTIFICACIONES = 31;

	/** 
	 * Index of column RUTA_CARPETA_ORIGEN_PAYPOINT
	 */
	protected static final int COLUMN_RUTA_CARPETA_ORIGEN_PAYPOINT = 32;

	/** 
	 * Index of column RUTA_CARPETA_DESTINO_PAYPOINT
	 */
	protected static final int COLUMN_RUTA_CARPETA_DESTINO_PAYPOINT = 33;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 33;

	/** 
	 * Index of primary-key column IDCONFIFURACION
	 */
	protected static final int PK_COLUMN_IDCONFIFURACION = 1;

	/** 
	 * Inserts a new row in the CONFIGURACION table.
	 */
	public ConfiguracionPk insert(Configuracion dto) throws ConfiguracionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdconfifuracionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IDCONFIFURACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutaorigenprocesarModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTAORIGENPROCESAR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutacarpetaejecucionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTACARPETAEJECUCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutacarpetaerroresModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTACARPETAERRORES" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutacarpetaexitososModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTACARPETAEXITOSOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutaorigencancelacionesxmlModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTAORIGENCANCELACIONESXML" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutadestinocancelacionesxmlModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTADESTINOCANCELACIONESXML" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRenamearchivostimbradosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RENAMEARCHIVOSTIMBRADOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLigapacModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LIGAPAC" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUsuariopacModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "USUARIOPAC" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPasspacModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PASSPAC" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMinutosdemonModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MINUTOSDEMON" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEnviodecorreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ENVIODECORREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCorreoremitenteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CORREOREMITENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUsuarioremitenteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "USUARIOREMITENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDominiosmtpModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DOMINIOSMTP" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPuertosmtpModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PUERTOSMTP" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPasswordcorreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PASSWORDCORREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAutenticacionsmtpModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "AUTENTICACIONSMTP" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDestinatariosfijosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESTINATARIOSFIJOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAsuntocorreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ASUNTOCORREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPlantillacorreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PLANTILLACORREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isActivarimpresionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACTIVARIMPRESION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImpresorapredeterminadaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IMPRESORAPREDETERMINADA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isErrorPacUltimaConnModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ERROR_PAC_ULTIMA_CONN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutaEjecutableAdobeReaderModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTA_EJECUTABLE_ADOBE_READER" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutaCarpetaOrigenEcontabilidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTA_CARPETA_ORIGEN_ECONTABILIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutaCarpetaDestinoEcontabilidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTA_CARPETA_DESTINO_ECONTABILIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOrdenLecturaArchivosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ORDEN_LECTURA_ARCHIVOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLotePdfConcentradoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LOTE_PDF_CONCENTRADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLoteNotificacionesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LOTE_NOTIFICACIONES" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutaCarpetaOrigenPaypointModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTA_CARPETA_ORIGEN_PAYPOINT" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutaCarpetaDestinoPaypointModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTA_CARPETA_DESTINO_PAYPOINT" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdconfifuracionModified()) {
				stmt.setInt( index++, dto.getIdconfifuracion() );
			}
		
			if (dto.isRutaorigenprocesarModified()) {
				stmt.setString( index++, dto.getRutaorigenprocesar() );
			}
		
			if (dto.isRutacarpetaejecucionModified()) {
				stmt.setString( index++, dto.getRutacarpetaejecucion() );
			}
		
			if (dto.isRutacarpetaerroresModified()) {
				stmt.setString( index++, dto.getRutacarpetaerrores() );
			}
		
			if (dto.isRutacarpetaexitososModified()) {
				stmt.setString( index++, dto.getRutacarpetaexitosos() );
			}
		
			if (dto.isRutaorigencancelacionesxmlModified()) {
				stmt.setString( index++, dto.getRutaorigencancelacionesxml() );
			}
		
			if (dto.isRutadestinocancelacionesxmlModified()) {
				stmt.setString( index++, dto.getRutadestinocancelacionesxml() );
			}
		
			if (dto.isRenamearchivostimbradosModified()) {
				stmt.setString( index++, dto.getRenamearchivostimbrados() );
			}
		
			if (dto.isLigapacModified()) {
				stmt.setString( index++, dto.getLigapac() );
			}
		
			if (dto.isUsuariopacModified()) {
				stmt.setString( index++, dto.getUsuariopac() );
			}
		
			if (dto.isPasspacModified()) {
				stmt.setString( index++, dto.getPasspac() );
			}
		
			if (dto.isMinutosdemonModified()) {
				if (dto.isMinutosdemonNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMinutosdemon() );
				}
		
			}
		
			if (dto.isEnviodecorreoModified()) {
				if (dto.isEnviodecorreoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getEnviodecorreo() );
				}
		
			}
		
			if (dto.isCorreoremitenteModified()) {
				stmt.setString( index++, dto.getCorreoremitente() );
			}
		
			if (dto.isUsuarioremitenteModified()) {
				stmt.setString( index++, dto.getUsuarioremitente() );
			}
		
			if (dto.isDominiosmtpModified()) {
				stmt.setString( index++, dto.getDominiosmtp() );
			}
		
			if (dto.isPuertosmtpModified()) {
				if (dto.isPuertosmtpNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPuertosmtp() );
				}
		
			}
		
			if (dto.isPasswordcorreoModified()) {
				stmt.setString( index++, dto.getPasswordcorreo() );
			}
		
			if (dto.isAutenticacionsmtpModified()) {
				if (dto.isAutenticacionsmtpNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAutenticacionsmtp() );
				}
		
			}
		
			if (dto.isDestinatariosfijosModified()) {
				stmt.setString( index++, dto.getDestinatariosfijos() );
			}
		
			if (dto.isAsuntocorreoModified()) {
				stmt.setString( index++, dto.getAsuntocorreo() );
			}
		
			if (dto.isPlantillacorreoModified()) {
				stmt.setString( index++, dto.getPlantillacorreo() );
			}
		
			if (dto.isActivarimpresionModified()) {
				if (dto.isActivarimpresionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getActivarimpresion() );
				}
		
			}
		
			if (dto.isImpresorapredeterminadaModified()) {
				stmt.setString( index++, dto.getImpresorapredeterminada() );
			}
		
			if (dto.isErrorPacUltimaConnModified()) {
				if (dto.isErrorPacUltimaConnNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getErrorPacUltimaConn() );
				}
		
			}
		
			if (dto.isRutaEjecutableAdobeReaderModified()) {
				stmt.setString( index++, dto.getRutaEjecutableAdobeReader() );
			}
		
			if (dto.isRutaCarpetaOrigenEcontabilidadModified()) {
				stmt.setString( index++, dto.getRutaCarpetaOrigenEcontabilidad() );
			}
		
			if (dto.isRutaCarpetaDestinoEcontabilidadModified()) {
				stmt.setString( index++, dto.getRutaCarpetaDestinoEcontabilidad() );
			}
		
			if (dto.isOrdenLecturaArchivosModified()) {
				stmt.setInt( index++, dto.getOrdenLecturaArchivos() );
			}
		
			if (dto.isLotePdfConcentradoModified()) {
				stmt.setInt( index++, dto.getLotePdfConcentrado() );
			}
		
			if (dto.isLoteNotificacionesModified()) {
				stmt.setInt( index++, dto.getLoteNotificaciones() );
			}
		
			if (dto.isRutaCarpetaOrigenPaypointModified()) {
				stmt.setString( index++, dto.getRutaCarpetaOrigenPaypoint() );
			}
		
			if (dto.isRutaCarpetaDestinoPaypointModified()) {
				stmt.setString( index++, dto.getRutaCarpetaDestinoPaypoint() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ConfiguracionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the CONFIGURACION table.
	 */
	public void update(ConfiguracionPk pk, Configuracion dto) throws ConfiguracionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdconfifuracionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IDCONFIFURACION=?" );
				modified=true;
			}
		
			if (dto.isRutaorigenprocesarModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTAORIGENPROCESAR=?" );
				modified=true;
			}
		
			if (dto.isRutacarpetaejecucionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTACARPETAEJECUCION=?" );
				modified=true;
			}
		
			if (dto.isRutacarpetaerroresModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTACARPETAERRORES=?" );
				modified=true;
			}
		
			if (dto.isRutacarpetaexitososModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTACARPETAEXITOSOS=?" );
				modified=true;
			}
		
			if (dto.isRutaorigencancelacionesxmlModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTAORIGENCANCELACIONESXML=?" );
				modified=true;
			}
		
			if (dto.isRutadestinocancelacionesxmlModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTADESTINOCANCELACIONESXML=?" );
				modified=true;
			}
		
			if (dto.isRenamearchivostimbradosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RENAMEARCHIVOSTIMBRADOS=?" );
				modified=true;
			}
		
			if (dto.isLigapacModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LIGAPAC=?" );
				modified=true;
			}
		
			if (dto.isUsuariopacModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "USUARIOPAC=?" );
				modified=true;
			}
		
			if (dto.isPasspacModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PASSPAC=?" );
				modified=true;
			}
		
			if (dto.isMinutosdemonModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MINUTOSDEMON=?" );
				modified=true;
			}
		
			if (dto.isEnviodecorreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ENVIODECORREO=?" );
				modified=true;
			}
		
			if (dto.isCorreoremitenteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CORREOREMITENTE=?" );
				modified=true;
			}
		
			if (dto.isUsuarioremitenteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "USUARIOREMITENTE=?" );
				modified=true;
			}
		
			if (dto.isDominiosmtpModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DOMINIOSMTP=?" );
				modified=true;
			}
		
			if (dto.isPuertosmtpModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PUERTOSMTP=?" );
				modified=true;
			}
		
			if (dto.isPasswordcorreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PASSWORDCORREO=?" );
				modified=true;
			}
		
			if (dto.isAutenticacionsmtpModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "AUTENTICACIONSMTP=?" );
				modified=true;
			}
		
			if (dto.isDestinatariosfijosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESTINATARIOSFIJOS=?" );
				modified=true;
			}
		
			if (dto.isAsuntocorreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ASUNTOCORREO=?" );
				modified=true;
			}
		
			if (dto.isPlantillacorreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PLANTILLACORREO=?" );
				modified=true;
			}
		
			if (dto.isActivarimpresionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACTIVARIMPRESION=?" );
				modified=true;
			}
		
			if (dto.isImpresorapredeterminadaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IMPRESORAPREDETERMINADA=?" );
				modified=true;
			}
		
			if (dto.isErrorPacUltimaConnModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ERROR_PAC_ULTIMA_CONN=?" );
				modified=true;
			}
		
			if (dto.isRutaEjecutableAdobeReaderModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTA_EJECUTABLE_ADOBE_READER=?" );
				modified=true;
			}
		
			if (dto.isRutaCarpetaOrigenEcontabilidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTA_CARPETA_ORIGEN_ECONTABILIDAD=?" );
				modified=true;
			}
		
			if (dto.isRutaCarpetaDestinoEcontabilidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTA_CARPETA_DESTINO_ECONTABILIDAD=?" );
				modified=true;
			}
		
			if (dto.isOrdenLecturaArchivosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ORDEN_LECTURA_ARCHIVOS=?" );
				modified=true;
			}
		
			if (dto.isLotePdfConcentradoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LOTE_PDF_CONCENTRADO=?" );
				modified=true;
			}
		
			if (dto.isLoteNotificacionesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LOTE_NOTIFICACIONES=?" );
				modified=true;
			}
		
			if (dto.isRutaCarpetaOrigenPaypointModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTA_CARPETA_ORIGEN_PAYPOINT=?" );
				modified=true;
			}
		
			if (dto.isRutaCarpetaDestinoPaypointModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTA_CARPETA_DESTINO_PAYPOINT=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE IDCONFIFURACION=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdconfifuracionModified()) {
				stmt.setInt( index++, dto.getIdconfifuracion() );
			}
		
			if (dto.isRutaorigenprocesarModified()) {
				stmt.setString( index++, dto.getRutaorigenprocesar() );
			}
		
			if (dto.isRutacarpetaejecucionModified()) {
				stmt.setString( index++, dto.getRutacarpetaejecucion() );
			}
		
			if (dto.isRutacarpetaerroresModified()) {
				stmt.setString( index++, dto.getRutacarpetaerrores() );
			}
		
			if (dto.isRutacarpetaexitososModified()) {
				stmt.setString( index++, dto.getRutacarpetaexitosos() );
			}
		
			if (dto.isRutaorigencancelacionesxmlModified()) {
				stmt.setString( index++, dto.getRutaorigencancelacionesxml() );
			}
		
			if (dto.isRutadestinocancelacionesxmlModified()) {
				stmt.setString( index++, dto.getRutadestinocancelacionesxml() );
			}
		
			if (dto.isRenamearchivostimbradosModified()) {
				stmt.setString( index++, dto.getRenamearchivostimbrados() );
			}
		
			if (dto.isLigapacModified()) {
				stmt.setString( index++, dto.getLigapac() );
			}
		
			if (dto.isUsuariopacModified()) {
				stmt.setString( index++, dto.getUsuariopac() );
			}
		
			if (dto.isPasspacModified()) {
				stmt.setString( index++, dto.getPasspac() );
			}
		
			if (dto.isMinutosdemonModified()) {
				if (dto.isMinutosdemonNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMinutosdemon() );
				}
		
			}
		
			if (dto.isEnviodecorreoModified()) {
				if (dto.isEnviodecorreoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getEnviodecorreo() );
				}
		
			}
		
			if (dto.isCorreoremitenteModified()) {
				stmt.setString( index++, dto.getCorreoremitente() );
			}
		
			if (dto.isUsuarioremitenteModified()) {
				stmt.setString( index++, dto.getUsuarioremitente() );
			}
		
			if (dto.isDominiosmtpModified()) {
				stmt.setString( index++, dto.getDominiosmtp() );
			}
		
			if (dto.isPuertosmtpModified()) {
				if (dto.isPuertosmtpNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPuertosmtp() );
				}
		
			}
		
			if (dto.isPasswordcorreoModified()) {
				stmt.setString( index++, dto.getPasswordcorreo() );
			}
		
			if (dto.isAutenticacionsmtpModified()) {
				if (dto.isAutenticacionsmtpNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAutenticacionsmtp() );
				}
		
			}
		
			if (dto.isDestinatariosfijosModified()) {
				stmt.setString( index++, dto.getDestinatariosfijos() );
			}
		
			if (dto.isAsuntocorreoModified()) {
				stmt.setString( index++, dto.getAsuntocorreo() );
			}
		
			if (dto.isPlantillacorreoModified()) {
				stmt.setString( index++, dto.getPlantillacorreo() );
			}
		
			if (dto.isActivarimpresionModified()) {
				if (dto.isActivarimpresionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getActivarimpresion() );
				}
		
			}
		
			if (dto.isImpresorapredeterminadaModified()) {
				stmt.setString( index++, dto.getImpresorapredeterminada() );
			}
		
			if (dto.isErrorPacUltimaConnModified()) {
				if (dto.isErrorPacUltimaConnNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getErrorPacUltimaConn() );
				}
		
			}
		
			if (dto.isRutaEjecutableAdobeReaderModified()) {
				stmt.setString( index++, dto.getRutaEjecutableAdobeReader() );
			}
		
			if (dto.isRutaCarpetaOrigenEcontabilidadModified()) {
				stmt.setString( index++, dto.getRutaCarpetaOrigenEcontabilidad() );
			}
		
			if (dto.isRutaCarpetaDestinoEcontabilidadModified()) {
				stmt.setString( index++, dto.getRutaCarpetaDestinoEcontabilidad() );
			}
		
			if (dto.isOrdenLecturaArchivosModified()) {
				stmt.setInt( index++, dto.getOrdenLecturaArchivos() );
			}
		
			if (dto.isLotePdfConcentradoModified()) {
				stmt.setInt( index++, dto.getLotePdfConcentrado() );
			}
		
			if (dto.isLoteNotificacionesModified()) {
				stmt.setInt( index++, dto.getLoteNotificaciones() );
			}
		
			if (dto.isRutaCarpetaOrigenPaypointModified()) {
				stmt.setString( index++, dto.getRutaCarpetaOrigenPaypoint() );
			}
		
			if (dto.isRutaCarpetaDestinoPaypointModified()) {
				stmt.setString( index++, dto.getRutaCarpetaDestinoPaypoint() );
			}
		
			stmt.setInt( index++, pk.getIdconfifuracion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ConfiguracionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the CONFIGURACION table.
	 */
	public void delete(ConfiguracionPk pk) throws ConfiguracionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdconfifuracion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ConfiguracionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the CONFIGURACION table that matches the specified primary-key value.
	 */
	public Configuracion findByPrimaryKey(ConfiguracionPk pk) throws ConfiguracionDaoException
	{
		return findByPrimaryKey( pk.getIdconfifuracion() );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'IDCONFIFURACION = :idconfifuracion'.
	 */
	public Configuracion findByPrimaryKey(int idconfifuracion) throws ConfiguracionDaoException
	{
		Configuracion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDCONFIFURACION = ?", new Object[] {  new Integer(idconfifuracion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria ''.
	 */
	public Configuracion[] findAll() throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDCONFIFURACION", null );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'IDCONFIFURACION = :idconfifuracion'.
	 */
	public Configuracion[] findWhereIdconfifuracionEquals(int idconfifuracion) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCONFIFURACION = ? ORDER BY IDCONFIFURACION", new Object[] {  new Integer(idconfifuracion) } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTAORIGENPROCESAR = :rutaorigenprocesar'.
	 */
	public Configuracion[] findWhereRutaorigenprocesarEquals(String rutaorigenprocesar) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTAORIGENPROCESAR = ? ORDER BY RUTAORIGENPROCESAR", new Object[] { rutaorigenprocesar } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTACARPETAEJECUCION = :rutacarpetaejecucion'.
	 */
	public Configuracion[] findWhereRutacarpetaejecucionEquals(String rutacarpetaejecucion) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTACARPETAEJECUCION = ? ORDER BY RUTACARPETAEJECUCION", new Object[] { rutacarpetaejecucion } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTACARPETAERRORES = :rutacarpetaerrores'.
	 */
	public Configuracion[] findWhereRutacarpetaerroresEquals(String rutacarpetaerrores) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTACARPETAERRORES = ? ORDER BY RUTACARPETAERRORES", new Object[] { rutacarpetaerrores } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTACARPETAEXITOSOS = :rutacarpetaexitosos'.
	 */
	public Configuracion[] findWhereRutacarpetaexitososEquals(String rutacarpetaexitosos) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTACARPETAEXITOSOS = ? ORDER BY RUTACARPETAEXITOSOS", new Object[] { rutacarpetaexitosos } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTAORIGENCANCELACIONESXML = :rutaorigencancelacionesxml'.
	 */
	public Configuracion[] findWhereRutaorigencancelacionesxmlEquals(String rutaorigencancelacionesxml) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTAORIGENCANCELACIONESXML = ? ORDER BY RUTAORIGENCANCELACIONESXML", new Object[] { rutaorigencancelacionesxml } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTADESTINOCANCELACIONESXML = :rutadestinocancelacionesxml'.
	 */
	public Configuracion[] findWhereRutadestinocancelacionesxmlEquals(String rutadestinocancelacionesxml) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTADESTINOCANCELACIONESXML = ? ORDER BY RUTADESTINOCANCELACIONESXML", new Object[] { rutadestinocancelacionesxml } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RENAMEARCHIVOSTIMBRADOS = :renamearchivostimbrados'.
	 */
	public Configuracion[] findWhereRenamearchivostimbradosEquals(String renamearchivostimbrados) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RENAMEARCHIVOSTIMBRADOS = ? ORDER BY RENAMEARCHIVOSTIMBRADOS", new Object[] { renamearchivostimbrados } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'LIGAPAC = :ligapac'.
	 */
	public Configuracion[] findWhereLigapacEquals(String ligapac) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LIGAPAC = ? ORDER BY LIGAPAC", new Object[] { ligapac } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'USUARIOPAC = :usuariopac'.
	 */
	public Configuracion[] findWhereUsuariopacEquals(String usuariopac) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USUARIOPAC = ? ORDER BY USUARIOPAC", new Object[] { usuariopac } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'PASSPAC = :passpac'.
	 */
	public Configuracion[] findWherePasspacEquals(String passpac) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PASSPAC = ? ORDER BY PASSPAC", new Object[] { passpac } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'MINUTOSDEMON = :minutosdemon'.
	 */
	public Configuracion[] findWhereMinutosdemonEquals(int minutosdemon) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MINUTOSDEMON = ? ORDER BY MINUTOSDEMON", new Object[] {  new Integer(minutosdemon) } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'ENVIODECORREO = :enviodecorreo'.
	 */
	public Configuracion[] findWhereEnviodecorreoEquals(int enviodecorreo) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ENVIODECORREO = ? ORDER BY ENVIODECORREO", new Object[] {  new Integer(enviodecorreo) } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'CORREOREMITENTE = :correoremitente'.
	 */
	public Configuracion[] findWhereCorreoremitenteEquals(String correoremitente) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CORREOREMITENTE = ? ORDER BY CORREOREMITENTE", new Object[] { correoremitente } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'USUARIOREMITENTE = :usuarioremitente'.
	 */
	public Configuracion[] findWhereUsuarioremitenteEquals(String usuarioremitente) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USUARIOREMITENTE = ? ORDER BY USUARIOREMITENTE", new Object[] { usuarioremitente } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'DOMINIOSMTP = :dominiosmtp'.
	 */
	public Configuracion[] findWhereDominiosmtpEquals(String dominiosmtp) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DOMINIOSMTP = ? ORDER BY DOMINIOSMTP", new Object[] { dominiosmtp } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'PUERTOSMTP = :puertosmtp'.
	 */
	public Configuracion[] findWherePuertosmtpEquals(int puertosmtp) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PUERTOSMTP = ? ORDER BY PUERTOSMTP", new Object[] {  new Integer(puertosmtp) } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'PASSWORDCORREO = :passwordcorreo'.
	 */
	public Configuracion[] findWherePasswordcorreoEquals(String passwordcorreo) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PASSWORDCORREO = ? ORDER BY PASSWORDCORREO", new Object[] { passwordcorreo } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'AUTENTICACIONSMTP = :autenticacionsmtp'.
	 */
	public Configuracion[] findWhereAutenticacionsmtpEquals(int autenticacionsmtp) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AUTENTICACIONSMTP = ? ORDER BY AUTENTICACIONSMTP", new Object[] {  new Integer(autenticacionsmtp) } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'DESTINATARIOSFIJOS = :destinatariosfijos'.
	 */
	public Configuracion[] findWhereDestinatariosfijosEquals(String destinatariosfijos) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESTINATARIOSFIJOS = ? ORDER BY DESTINATARIOSFIJOS", new Object[] { destinatariosfijos } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'ASUNTOCORREO = :asuntocorreo'.
	 */
	public Configuracion[] findWhereAsuntocorreoEquals(String asuntocorreo) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ASUNTOCORREO = ? ORDER BY ASUNTOCORREO", new Object[] { asuntocorreo } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'PLANTILLACORREO = :plantillacorreo'.
	 */
	public Configuracion[] findWherePlantillacorreoEquals(String plantillacorreo) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PLANTILLACORREO = ? ORDER BY PLANTILLACORREO", new Object[] { plantillacorreo } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'ACTIVARIMPRESION = :activarimpresion'.
	 */
	public Configuracion[] findWhereActivarimpresionEquals(int activarimpresion) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVARIMPRESION = ? ORDER BY ACTIVARIMPRESION", new Object[] {  new Integer(activarimpresion) } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'IMPRESORAPREDETERMINADA = :impresorapredeterminada'.
	 */
	public Configuracion[] findWhereImpresorapredeterminadaEquals(String impresorapredeterminada) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPRESORAPREDETERMINADA = ? ORDER BY IMPRESORAPREDETERMINADA", new Object[] { impresorapredeterminada } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'ERROR_PAC_ULTIMA_CONN = :errorPacUltimaConn'.
	 */
	public Configuracion[] findWhereErrorPacUltimaConnEquals(int errorPacUltimaConn) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ERROR_PAC_ULTIMA_CONN = ? ORDER BY ERROR_PAC_ULTIMA_CONN", new Object[] {  new Integer(errorPacUltimaConn) } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTA_EJECUTABLE_ADOBE_READER = :rutaEjecutableAdobeReader'.
	 */
	public Configuracion[] findWhereRutaEjecutableAdobeReaderEquals(String rutaEjecutableAdobeReader) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTA_EJECUTABLE_ADOBE_READER = ? ORDER BY RUTA_EJECUTABLE_ADOBE_READER", new Object[] { rutaEjecutableAdobeReader } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTA_CARPETA_ORIGEN_ECONTABILIDAD = :rutaCarpetaOrigenEcontabilidad'.
	 */
	public Configuracion[] findWhereRutaCarpetaOrigenEcontabilidadEquals(String rutaCarpetaOrigenEcontabilidad) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTA_CARPETA_ORIGEN_ECONTABILIDAD = ? ORDER BY RUTA_CARPETA_ORIGEN_ECONTABILIDAD", new Object[] { rutaCarpetaOrigenEcontabilidad } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTA_CARPETA_DESTINO_ECONTABILIDAD = :rutaCarpetaDestinoEcontabilidad'.
	 */
	public Configuracion[] findWhereRutaCarpetaDestinoEcontabilidadEquals(String rutaCarpetaDestinoEcontabilidad) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTA_CARPETA_DESTINO_ECONTABILIDAD = ? ORDER BY RUTA_CARPETA_DESTINO_ECONTABILIDAD", new Object[] { rutaCarpetaDestinoEcontabilidad } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'ORDEN_LECTURA_ARCHIVOS = :ordenLecturaArchivos'.
	 */
	public Configuracion[] findWhereOrdenLecturaArchivosEquals(int ordenLecturaArchivos) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORDEN_LECTURA_ARCHIVOS = ? ORDER BY ORDEN_LECTURA_ARCHIVOS", new Object[] {  new Integer(ordenLecturaArchivos) } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'LOTE_PDF_CONCENTRADO = :lotePdfConcentrado'.
	 */
	public Configuracion[] findWhereLotePdfConcentradoEquals(int lotePdfConcentrado) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOTE_PDF_CONCENTRADO = ? ORDER BY LOTE_PDF_CONCENTRADO", new Object[] {  new Integer(lotePdfConcentrado) } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'LOTE_NOTIFICACIONES = :loteNotificaciones'.
	 */
	public Configuracion[] findWhereLoteNotificacionesEquals(int loteNotificaciones) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOTE_NOTIFICACIONES = ? ORDER BY LOTE_NOTIFICACIONES", new Object[] {  new Integer(loteNotificaciones) } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTA_CARPETA_ORIGEN_PAYPOINT = :rutaCarpetaOrigenPaypoint'.
	 */
	public Configuracion[] findWhereRutaCarpetaOrigenPaypointEquals(String rutaCarpetaOrigenPaypoint) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTA_CARPETA_ORIGEN_PAYPOINT = ? ORDER BY RUTA_CARPETA_ORIGEN_PAYPOINT", new Object[] { rutaCarpetaOrigenPaypoint } );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the criteria 'RUTA_CARPETA_DESTINO_PAYPOINT = :rutaCarpetaDestinoPaypoint'.
	 */
	public Configuracion[] findWhereRutaCarpetaDestinoPaypointEquals(String rutaCarpetaDestinoPaypoint) throws ConfiguracionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTA_CARPETA_DESTINO_PAYPOINT = ? ORDER BY RUTA_CARPETA_DESTINO_PAYPOINT", new Object[] { rutaCarpetaDestinoPaypoint } );
	}

	/**
	 * Method 'ConfiguracionDaoImpl'
	 * 
	 */
	public ConfiguracionDaoImpl()
	{
	}

	/**
	 * Method 'ConfiguracionDaoImpl'
	 * 
	 * @param userConn
	 */
	public ConfiguracionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CONFIGURACION";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Configuracion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Configuracion dto = new Configuracion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Configuracion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Configuracion dto = new Configuracion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Configuracion ret[] = new Configuracion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Configuracion dto, ResultSet rs) throws SQLException
	{
		dto.setIdconfifuracion( rs.getInt( COLUMN_IDCONFIFURACION ) );
		dto.setRutaorigenprocesar( rs.getString( COLUMN_RUTAORIGENPROCESAR ) );
		dto.setRutacarpetaejecucion( rs.getString( COLUMN_RUTACARPETAEJECUCION ) );
		dto.setRutacarpetaerrores( rs.getString( COLUMN_RUTACARPETAERRORES ) );
		dto.setRutacarpetaexitosos( rs.getString( COLUMN_RUTACARPETAEXITOSOS ) );
		dto.setRutaorigencancelacionesxml( rs.getString( COLUMN_RUTAORIGENCANCELACIONESXML ) );
		dto.setRutadestinocancelacionesxml( rs.getString( COLUMN_RUTADESTINOCANCELACIONESXML ) );
		dto.setRenamearchivostimbrados( rs.getString( COLUMN_RENAMEARCHIVOSTIMBRADOS ) );
		dto.setLigapac( rs.getString( COLUMN_LIGAPAC ) );
		dto.setUsuariopac( rs.getString( COLUMN_USUARIOPAC ) );
		dto.setPasspac( rs.getString( COLUMN_PASSPAC ) );
		dto.setMinutosdemon( rs.getInt( COLUMN_MINUTOSDEMON ) );
		if (rs.wasNull()) {
			dto.setMinutosdemonNull( true );
		}
		
		dto.setEnviodecorreo( rs.getInt( COLUMN_ENVIODECORREO ) );
		if (rs.wasNull()) {
			dto.setEnviodecorreoNull( true );
		}
		
		dto.setCorreoremitente( rs.getString( COLUMN_CORREOREMITENTE ) );
		dto.setUsuarioremitente( rs.getString( COLUMN_USUARIOREMITENTE ) );
		dto.setDominiosmtp( rs.getString( COLUMN_DOMINIOSMTP ) );
		dto.setPuertosmtp( rs.getInt( COLUMN_PUERTOSMTP ) );
		if (rs.wasNull()) {
			dto.setPuertosmtpNull( true );
		}
		
		dto.setPasswordcorreo( rs.getString( COLUMN_PASSWORDCORREO ) );
		dto.setAutenticacionsmtp( rs.getInt( COLUMN_AUTENTICACIONSMTP ) );
		if (rs.wasNull()) {
			dto.setAutenticacionsmtpNull( true );
		}
		
		dto.setDestinatariosfijos( rs.getString( COLUMN_DESTINATARIOSFIJOS ) );
		dto.setAsuntocorreo( rs.getString( COLUMN_ASUNTOCORREO ) );
		dto.setPlantillacorreo( rs.getString( COLUMN_PLANTILLACORREO ) );
		dto.setActivarimpresion( rs.getInt( COLUMN_ACTIVARIMPRESION ) );
		if (rs.wasNull()) {
			dto.setActivarimpresionNull( true );
		}
		
		dto.setImpresorapredeterminada( rs.getString( COLUMN_IMPRESORAPREDETERMINADA ) );
		dto.setErrorPacUltimaConn( rs.getInt( COLUMN_ERROR_PAC_ULTIMA_CONN ) );
		if (rs.wasNull()) {
			dto.setErrorPacUltimaConnNull( true );
		}
		
		dto.setRutaEjecutableAdobeReader( rs.getString( COLUMN_RUTA_EJECUTABLE_ADOBE_READER ) );
		dto.setRutaCarpetaOrigenEcontabilidad( rs.getString( COLUMN_RUTA_CARPETA_ORIGEN_ECONTABILIDAD ) );
		dto.setRutaCarpetaDestinoEcontabilidad( rs.getString( COLUMN_RUTA_CARPETA_DESTINO_ECONTABILIDAD ) );
		dto.setOrdenLecturaArchivos( rs.getInt( COLUMN_ORDEN_LECTURA_ARCHIVOS ) );
		dto.setLotePdfConcentrado( rs.getInt( COLUMN_LOTE_PDF_CONCENTRADO ) );
		dto.setLoteNotificaciones( rs.getInt( COLUMN_LOTE_NOTIFICACIONES ) );
		dto.setRutaCarpetaOrigenPaypoint( rs.getString( COLUMN_RUTA_CARPETA_ORIGEN_PAYPOINT ) );
		dto.setRutaCarpetaDestinoPaypoint( rs.getString( COLUMN_RUTA_CARPETA_DESTINO_PAYPOINT ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Configuracion dto)
	{
		dto.setIdconfifuracionModified( false );
		dto.setRutaorigenprocesarModified( false );
		dto.setRutacarpetaejecucionModified( false );
		dto.setRutacarpetaerroresModified( false );
		dto.setRutacarpetaexitososModified( false );
		dto.setRutaorigencancelacionesxmlModified( false );
		dto.setRutadestinocancelacionesxmlModified( false );
		dto.setRenamearchivostimbradosModified( false );
		dto.setLigapacModified( false );
		dto.setUsuariopacModified( false );
		dto.setPasspacModified( false );
		dto.setMinutosdemonModified( false );
		dto.setEnviodecorreoModified( false );
		dto.setCorreoremitenteModified( false );
		dto.setUsuarioremitenteModified( false );
		dto.setDominiosmtpModified( false );
		dto.setPuertosmtpModified( false );
		dto.setPasswordcorreoModified( false );
		dto.setAutenticacionsmtpModified( false );
		dto.setDestinatariosfijosModified( false );
		dto.setAsuntocorreoModified( false );
		dto.setPlantillacorreoModified( false );
		dto.setActivarimpresionModified( false );
		dto.setImpresorapredeterminadaModified( false );
		dto.setErrorPacUltimaConnModified( false );
		dto.setRutaEjecutableAdobeReaderModified( false );
		dto.setRutaCarpetaOrigenEcontabilidadModified( false );
		dto.setRutaCarpetaDestinoEcontabilidadModified( false );
		dto.setOrdenLecturaArchivosModified( false );
		dto.setLotePdfConcentradoModified( false );
		dto.setLoteNotificacionesModified( false );
		dto.setRutaCarpetaOrigenPaypointModified( false );
		dto.setRutaCarpetaDestinoPaypointModified( false );
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the specified arbitrary SQL statement
	 */
	public Configuracion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ConfiguracionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ConfiguracionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the CONFIGURACION table that match the specified arbitrary SQL statement
	 */
	public Configuracion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ConfiguracionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ConfiguracionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
