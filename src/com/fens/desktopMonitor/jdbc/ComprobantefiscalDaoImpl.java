/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.fens.desktopMonitor.jdbc;

import com.fens.desktopMonitor.dao.*;
import com.fens.desktopMonitor.factory.*;
import java.util.Date;
import com.fens.desktopMonitor.dto.*;
import com.fens.desktopMonitor.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ComprobantefiscalDaoImpl extends AbstractDAO implements ComprobantefiscalDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDCOMPROBANTEFISCAL, IDEMISOR, IDARCHIVOMAESTRO, IDESTATUS, IDTIPOCOMPROBANTE, NOMBREARCHIVOXML, NOMBREARCHIVOPDF, SERIE, FOLIO, UUID, SELLOEMISOR, FECHAHORASELLADO, FECHAHORATIMBRADO, FECHAHORAPROCESO, RFCRECEPTOR, SUBTOTAL, TOTAL, CADENAORIGINAL, FECHACANCELACION, MONEDA, OBSERVACIONES, NOMBRE_RECEPTOR, EMAIL, REFERENCIA1, REFERENCIA2, REFERENCIA3 FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDCOMPROBANTEFISCAL, IDEMISOR, IDARCHIVOMAESTRO, IDESTATUS, IDTIPOCOMPROBANTE, NOMBREARCHIVOXML, NOMBREARCHIVOPDF, SERIE, FOLIO, UUID, SELLOEMISOR, FECHAHORASELLADO, FECHAHORATIMBRADO, FECHAHORAPROCESO, RFCRECEPTOR, SUBTOTAL, TOTAL, CADENAORIGINAL, FECHACANCELACION, MONEDA, OBSERVACIONES, NOMBRE_RECEPTOR, EMAIL, REFERENCIA1, REFERENCIA2, REFERENCIA3 ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDCOMPROBANTEFISCAL = ?, IDEMISOR = ?, IDARCHIVOMAESTRO = ?, IDESTATUS = ?, IDTIPOCOMPROBANTE = ?, NOMBREARCHIVOXML = ?, NOMBREARCHIVOPDF = ?, SERIE = ?, FOLIO = ?, UUID = ?, SELLOEMISOR = ?, FECHAHORASELLADO = ?, FECHAHORATIMBRADO = ?, FECHAHORAPROCESO = ?, RFCRECEPTOR = ?, SUBTOTAL = ?, TOTAL = ?, CADENAORIGINAL = ?, FECHACANCELACION = ?, MONEDA = ?, OBSERVACIONES = ?, NOMBRE_RECEPTOR = ?, EMAIL = ?, REFERENCIA1 = ?, REFERENCIA2 = ?, REFERENCIA3 = ? WHERE IDCOMPROBANTEFISCAL = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDCOMPROBANTEFISCAL = ?";

	/** 
	 * Index of column IDCOMPROBANTEFISCAL
	 */
	protected static final int COLUMN_IDCOMPROBANTEFISCAL = 1;

	/** 
	 * Index of column IDEMISOR
	 */
	protected static final int COLUMN_IDEMISOR = 2;

	/** 
	 * Index of column IDARCHIVOMAESTRO
	 */
	protected static final int COLUMN_IDARCHIVOMAESTRO = 3;

	/** 
	 * Index of column IDESTATUS
	 */
	protected static final int COLUMN_IDESTATUS = 4;

	/** 
	 * Index of column IDTIPOCOMPROBANTE
	 */
	protected static final int COLUMN_IDTIPOCOMPROBANTE = 5;

	/** 
	 * Index of column NOMBREARCHIVOXML
	 */
	protected static final int COLUMN_NOMBREARCHIVOXML = 6;

	/** 
	 * Index of column NOMBREARCHIVOPDF
	 */
	protected static final int COLUMN_NOMBREARCHIVOPDF = 7;

	/** 
	 * Index of column SERIE
	 */
	protected static final int COLUMN_SERIE = 8;

	/** 
	 * Index of column FOLIO
	 */
	protected static final int COLUMN_FOLIO = 9;

	/** 
	 * Index of column UUID
	 */
	protected static final int COLUMN_UUID = 10;

	/** 
	 * Index of column SELLOEMISOR
	 */
	protected static final int COLUMN_SELLOEMISOR = 11;

	/** 
	 * Index of column FECHAHORASELLADO
	 */
	protected static final int COLUMN_FECHAHORASELLADO = 12;

	/** 
	 * Index of column FECHAHORATIMBRADO
	 */
	protected static final int COLUMN_FECHAHORATIMBRADO = 13;

	/** 
	 * Index of column FECHAHORAPROCESO
	 */
	protected static final int COLUMN_FECHAHORAPROCESO = 14;

	/** 
	 * Index of column RFCRECEPTOR
	 */
	protected static final int COLUMN_RFCRECEPTOR = 15;

	/** 
	 * Index of column SUBTOTAL
	 */
	protected static final int COLUMN_SUBTOTAL = 16;

	/** 
	 * Index of column TOTAL
	 */
	protected static final int COLUMN_TOTAL = 17;

	/** 
	 * Index of column CADENAORIGINAL
	 */
	protected static final int COLUMN_CADENAORIGINAL = 18;

	/** 
	 * Index of column FECHACANCELACION
	 */
	protected static final int COLUMN_FECHACANCELACION = 19;

	/** 
	 * Index of column MONEDA
	 */
	protected static final int COLUMN_MONEDA = 20;

	/** 
	 * Index of column OBSERVACIONES
	 */
	protected static final int COLUMN_OBSERVACIONES = 21;

	/** 
	 * Index of column NOMBRE_RECEPTOR
	 */
	protected static final int COLUMN_NOMBRE_RECEPTOR = 22;

	/** 
	 * Index of column EMAIL
	 */
	protected static final int COLUMN_EMAIL = 23;

	/** 
	 * Index of column REFERENCIA1
	 */
	protected static final int COLUMN_REFERENCIA1 = 24;

	/** 
	 * Index of column REFERENCIA2
	 */
	protected static final int COLUMN_REFERENCIA2 = 25;

	/** 
	 * Index of column REFERENCIA3
	 */
	protected static final int COLUMN_REFERENCIA3 = 26;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 26;

	/** 
	 * Index of primary-key column IDCOMPROBANTEFISCAL
	 */
	protected static final int PK_COLUMN_IDCOMPROBANTEFISCAL = 1;

	/** 
	 * Inserts a new row in the COMPROBANTEFISCAL table.
	 */
	public ComprobantefiscalPk insert(Comprobantefiscal dto) throws ComprobantefiscalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdcomprobantefiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IDCOMPROBANTEFISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdemisorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IDEMISOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdarchivomaestroModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IDARCHIVOMAESTRO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdestatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IDESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdtipocomprobanteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IDTIPOCOMPROBANTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombrearchivoxmlModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBREARCHIVOXML" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombrearchivopdfModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBREARCHIVOPDF" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSerieModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SERIE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUuidModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "UUID" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSelloemisorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SELLOEMISOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechahoraselladoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHAHORASELLADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechahoratimbradoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHAHORATIMBRADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechahoraprocesoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHAHORAPROCESO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRfcreceptorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RFCRECEPTOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSubtotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SUBTOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCadenaoriginalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CADENAORIGINAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechacancelacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHACANCELACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMonedaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONEDA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isObservacionesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "OBSERVACIONES" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreReceptorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_RECEPTOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEmailModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "EMAIL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isReferencia1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "REFERENCIA1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isReferencia2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "REFERENCIA2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isReferencia3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "REFERENCIA3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			//stmt = conn.prepareStatement( sql.toString() );
                        
                        /////////////-- inicio 
                        stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
                        /////////////-- fin
                        
			int index = 1;
			if (dto.isIdcomprobantefiscalModified()) {
				stmt.setInt( index++, dto.getIdcomprobantefiscal() );
			}
		
			if (dto.isIdemisorModified()) {
				stmt.setInt( index++, dto.getIdemisor() );
			}
		
			if (dto.isIdarchivomaestroModified()) {
				if (dto.isIdarchivomaestroNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdarchivomaestro() );
				}
		
			}
		
			if (dto.isIdestatusModified()) {
				stmt.setInt( index++, dto.getIdestatus() );
			}
		
			if (dto.isIdtipocomprobanteModified()) {
				stmt.setInt( index++, dto.getIdtipocomprobante() );
			}
		
			if (dto.isNombrearchivoxmlModified()) {
				stmt.setString( index++, dto.getNombrearchivoxml() );
			}
		
			if (dto.isNombrearchivopdfModified()) {
				stmt.setString( index++, dto.getNombrearchivopdf() );
			}
		
			if (dto.isSerieModified()) {
				stmt.setString( index++, dto.getSerie() );
			}
		
			if (dto.isFolioModified()) {
				stmt.setString( index++, dto.getFolio() );
			}
		
			if (dto.isUuidModified()) {
				stmt.setString( index++, dto.getUuid() );
			}
		
			if (dto.isSelloemisorModified()) {
				stmt.setString( index++, dto.getSelloemisor() );
			}
		
			if (dto.isFechahoraselladoModified()) {
				stmt.setTimestamp(index++, dto.getFechahorasellado()==null ? null : new java.sql.Timestamp( dto.getFechahorasellado().getTime() ) );
			}
		
			if (dto.isFechahoratimbradoModified()) {
				stmt.setTimestamp(index++, dto.getFechahoratimbrado()==null ? null : new java.sql.Timestamp( dto.getFechahoratimbrado().getTime() ) );
			}
		
			if (dto.isFechahoraprocesoModified()) {
				stmt.setTimestamp(index++, dto.getFechahoraproceso()==null ? null : new java.sql.Timestamp( dto.getFechahoraproceso().getTime() ) );
			}
		
			if (dto.isRfcreceptorModified()) {
				stmt.setString( index++, dto.getRfcreceptor() );
			}
		
			if (dto.isSubtotalModified()) {
				if (dto.isSubtotalNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSubtotal() );
				}
		
			}
		
			if (dto.isTotalModified()) {
				if (dto.isTotalNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTotal() );
				}
		
			}
		
			if (dto.isCadenaoriginalModified()) {
				stmt.setString( index++, dto.getCadenaoriginal() );
			}
		
			if (dto.isFechacancelacionModified()) {
				stmt.setTimestamp(index++, dto.getFechacancelacion()==null ? null : new java.sql.Timestamp( dto.getFechacancelacion().getTime() ) );
			}
		
			if (dto.isMonedaModified()) {
				stmt.setString( index++, dto.getMoneda() );
			}
		
			if (dto.isObservacionesModified()) {
				stmt.setString( index++, dto.getObservaciones() );
			}
		
			if (dto.isNombreReceptorModified()) {
				stmt.setString( index++, dto.getNombreReceptor() );
			}
		
			if (dto.isEmailModified()) {
				stmt.setString( index++, dto.getEmail() );
			}
		
			if (dto.isReferencia1Modified()) {
				stmt.setString( index++, dto.getReferencia1() );
			}
		
			if (dto.isReferencia2Modified()) {
				stmt.setString( index++, dto.getReferencia2() );
			}
		
			if (dto.isReferencia3Modified()) {
				stmt.setString( index++, dto.getReferencia3() );
			}
                        
                        System.out.println( "Executing " + sql.toString() + " with values: " + dto );
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
                        
                        /////////////-- inicio CODIGO AGREGADO A MANO:
                        // retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdcomprobantefiscal( rs.getInt( 1 ) );
			}
                        /////////////-- fin
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ComprobantefiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the COMPROBANTEFISCAL table.
	 */
	public void update(ComprobantefiscalPk pk, Comprobantefiscal dto) throws ComprobantefiscalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdcomprobantefiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IDCOMPROBANTEFISCAL=?" );
				modified=true;
			}
		
			if (dto.isIdemisorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IDEMISOR=?" );
				modified=true;
			}
		
			if (dto.isIdarchivomaestroModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IDARCHIVOMAESTRO=?" );
				modified=true;
			}
		
			if (dto.isIdestatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IDESTATUS=?" );
				modified=true;
			}
		
			if (dto.isIdtipocomprobanteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IDTIPOCOMPROBANTE=?" );
				modified=true;
			}
		
			if (dto.isNombrearchivoxmlModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBREARCHIVOXML=?" );
				modified=true;
			}
		
			if (dto.isNombrearchivopdfModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBREARCHIVOPDF=?" );
				modified=true;
			}
		
			if (dto.isSerieModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SERIE=?" );
				modified=true;
			}
		
			if (dto.isFolioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO=?" );
				modified=true;
			}
		
			if (dto.isUuidModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "UUID=?" );
				modified=true;
			}
		
			if (dto.isSelloemisorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SELLOEMISOR=?" );
				modified=true;
			}
		
			if (dto.isFechahoraselladoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHAHORASELLADO=?" );
				modified=true;
			}
		
			if (dto.isFechahoratimbradoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHAHORATIMBRADO=?" );
				modified=true;
			}
		
			if (dto.isFechahoraprocesoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHAHORAPROCESO=?" );
				modified=true;
			}
		
			if (dto.isRfcreceptorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RFCRECEPTOR=?" );
				modified=true;
			}
		
			if (dto.isSubtotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SUBTOTAL=?" );
				modified=true;
			}
		
			if (dto.isTotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TOTAL=?" );
				modified=true;
			}
		
			if (dto.isCadenaoriginalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CADENAORIGINAL=?" );
				modified=true;
			}
		
			if (dto.isFechacancelacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHACANCELACION=?" );
				modified=true;
			}
		
			if (dto.isMonedaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONEDA=?" );
				modified=true;
			}
		
			if (dto.isObservacionesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "OBSERVACIONES=?" );
				modified=true;
			}
		
			if (dto.isNombreReceptorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_RECEPTOR=?" );
				modified=true;
			}
		
			if (dto.isEmailModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "EMAIL=?" );
				modified=true;
			}
		
			if (dto.isReferencia1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REFERENCIA1=?" );
				modified=true;
			}
		
			if (dto.isReferencia2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REFERENCIA2=?" );
				modified=true;
			}
		
			if (dto.isReferencia3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REFERENCIA3=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE IDCOMPROBANTEFISCAL=?" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdcomprobantefiscalModified()) {
				stmt.setInt( index++, dto.getIdcomprobantefiscal() );
			}
		
			if (dto.isIdemisorModified()) {
				stmt.setInt( index++, dto.getIdemisor() );
			}
		
			if (dto.isIdarchivomaestroModified()) {
				if (dto.isIdarchivomaestroNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdarchivomaestro() );
				}
		
			}
		
			if (dto.isIdestatusModified()) {
				stmt.setInt( index++, dto.getIdestatus() );
			}
		
			if (dto.isIdtipocomprobanteModified()) {
				stmt.setInt( index++, dto.getIdtipocomprobante() );
			}
		
			if (dto.isNombrearchivoxmlModified()) {
				stmt.setString( index++, dto.getNombrearchivoxml() );
			}
		
			if (dto.isNombrearchivopdfModified()) {
				stmt.setString( index++, dto.getNombrearchivopdf() );
			}
		
			if (dto.isSerieModified()) {
				stmt.setString( index++, dto.getSerie() );
			}
		
			if (dto.isFolioModified()) {
				stmt.setString( index++, dto.getFolio() );
			}
		
			if (dto.isUuidModified()) {
				stmt.setString( index++, dto.getUuid() );
			}
		
			if (dto.isSelloemisorModified()) {
				stmt.setString( index++, dto.getSelloemisor() );
			}
		
			if (dto.isFechahoraselladoModified()) {
				stmt.setTimestamp(index++, dto.getFechahorasellado()==null ? null : new java.sql.Timestamp( dto.getFechahorasellado().getTime() ) );
			}
		
			if (dto.isFechahoratimbradoModified()) {
				stmt.setTimestamp(index++, dto.getFechahoratimbrado()==null ? null : new java.sql.Timestamp( dto.getFechahoratimbrado().getTime() ) );
			}
		
			if (dto.isFechahoraprocesoModified()) {
				stmt.setTimestamp(index++, dto.getFechahoraproceso()==null ? null : new java.sql.Timestamp( dto.getFechahoraproceso().getTime() ) );
			}
		
			if (dto.isRfcreceptorModified()) {
				stmt.setString( index++, dto.getRfcreceptor() );
			}
		
			if (dto.isSubtotalModified()) {
				if (dto.isSubtotalNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSubtotal() );
				}
		
			}
		
			if (dto.isTotalModified()) {
				if (dto.isTotalNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTotal() );
				}
		
			}
		
			if (dto.isCadenaoriginalModified()) {
				stmt.setString( index++, dto.getCadenaoriginal() );
			}
		
			if (dto.isFechacancelacionModified()) {
				stmt.setTimestamp(index++, dto.getFechacancelacion()==null ? null : new java.sql.Timestamp( dto.getFechacancelacion().getTime() ) );
			}
		
			if (dto.isMonedaModified()) {
				stmt.setString( index++, dto.getMoneda() );
			}
		
			if (dto.isObservacionesModified()) {
				stmt.setString( index++, dto.getObservaciones() );
			}
		
			if (dto.isNombreReceptorModified()) {
				stmt.setString( index++, dto.getNombreReceptor() );
			}
		
			if (dto.isEmailModified()) {
				stmt.setString( index++, dto.getEmail() );
			}
		
			if (dto.isReferencia1Modified()) {
				stmt.setString( index++, dto.getReferencia1() );
			}
		
			if (dto.isReferencia2Modified()) {
				stmt.setString( index++, dto.getReferencia2() );
			}
		
			if (dto.isReferencia3Modified()) {
				stmt.setString( index++, dto.getReferencia3() );
			}
		
			stmt.setInt( index++, pk.getIdcomprobantefiscal() );
                        
                        System.out.println( "Executing " + sql.toString() + " with values: " + dto );
                        
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ComprobantefiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the COMPROBANTEFISCAL table.
	 */
	public void delete(ComprobantefiscalPk pk) throws ComprobantefiscalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdcomprobantefiscal() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ComprobantefiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the COMPROBANTEFISCAL table that matches the specified primary-key value.
	 */
	public Comprobantefiscal findByPrimaryKey(ComprobantefiscalPk pk) throws ComprobantefiscalDaoException
	{
		return findByPrimaryKey( pk.getIdcomprobantefiscal() );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'IDCOMPROBANTEFISCAL = :idcomprobantefiscal'.
	 */
	public Comprobantefiscal findByPrimaryKey(int idcomprobantefiscal) throws ComprobantefiscalDaoException
	{
		Comprobantefiscal ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDCOMPROBANTEFISCAL = ?", new Object[] {  new Integer(idcomprobantefiscal) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria ''.
	 */
	public Comprobantefiscal[] findAll() throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDCOMPROBANTEFISCAL", null );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'IDCOMPROBANTEFISCAL = :idcomprobantefiscal'.
	 */
	public Comprobantefiscal[] findWhereIdcomprobantefiscalEquals(int idcomprobantefiscal) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCOMPROBANTEFISCAL = ? ORDER BY IDCOMPROBANTEFISCAL", new Object[] {  new Integer(idcomprobantefiscal) } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'IDEMISOR = :idemisor'.
	 */
	public Comprobantefiscal[] findWhereIdemisorEquals(int idemisor) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEMISOR = ? ORDER BY IDEMISOR", new Object[] {  new Integer(idemisor) } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'IDARCHIVOMAESTRO = :idarchivomaestro'.
	 */
	public Comprobantefiscal[] findWhereIdarchivomaestroEquals(int idarchivomaestro) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDARCHIVOMAESTRO = ? ORDER BY IDARCHIVOMAESTRO", new Object[] {  new Integer(idarchivomaestro) } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'IDESTATUS = :idestatus'.
	 */
	public Comprobantefiscal[] findWhereIdestatusEquals(int idestatus) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDESTATUS = ? ORDER BY IDESTATUS", new Object[] {  new Integer(idestatus) } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'IDTIPOCOMPROBANTE = :idtipocomprobante'.
	 */
	public Comprobantefiscal[] findWhereIdtipocomprobanteEquals(int idtipocomprobante) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDTIPOCOMPROBANTE = ? ORDER BY IDTIPOCOMPROBANTE", new Object[] {  new Integer(idtipocomprobante) } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'NOMBREARCHIVOXML = :nombrearchivoxml'.
	 */
	public Comprobantefiscal[] findWhereNombrearchivoxmlEquals(String nombrearchivoxml) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBREARCHIVOXML = ? ORDER BY NOMBREARCHIVOXML", new Object[] { nombrearchivoxml } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'NOMBREARCHIVOPDF = :nombrearchivopdf'.
	 */
	public Comprobantefiscal[] findWhereNombrearchivopdfEquals(String nombrearchivopdf) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBREARCHIVOPDF = ? ORDER BY NOMBREARCHIVOPDF", new Object[] { nombrearchivopdf } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'SERIE = :serie'.
	 */
	public Comprobantefiscal[] findWhereSerieEquals(String serie) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERIE = ? ORDER BY SERIE", new Object[] { serie } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'FOLIO = :folio'.
	 */
	public Comprobantefiscal[] findWhereFolioEquals(String folio) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO = ? ORDER BY FOLIO", new Object[] { folio } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'UUID = :uuid'.
	 */
	public Comprobantefiscal[] findWhereUuidEquals(String uuid) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UUID = ? ORDER BY UUID", new Object[] { uuid } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'SELLOEMISOR = :selloemisor'.
	 */
	public Comprobantefiscal[] findWhereSelloemisorEquals(String selloemisor) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SELLOEMISOR = ? ORDER BY SELLOEMISOR", new Object[] { selloemisor } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'FECHAHORASELLADO = :fechahorasellado'.
	 */
	public Comprobantefiscal[] findWhereFechahoraselladoEquals(Date fechahorasellado) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAHORASELLADO = ? ORDER BY FECHAHORASELLADO", new Object[] { fechahorasellado==null ? null : new java.sql.Timestamp( fechahorasellado.getTime() ) } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'FECHAHORATIMBRADO = :fechahoratimbrado'.
	 */
	public Comprobantefiscal[] findWhereFechahoratimbradoEquals(Date fechahoratimbrado) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAHORATIMBRADO = ? ORDER BY FECHAHORATIMBRADO", new Object[] { fechahoratimbrado==null ? null : new java.sql.Timestamp( fechahoratimbrado.getTime() ) } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'FECHAHORAPROCESO = :fechahoraproceso'.
	 */
	public Comprobantefiscal[] findWhereFechahoraprocesoEquals(Date fechahoraproceso) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAHORAPROCESO = ? ORDER BY FECHAHORAPROCESO", new Object[] { fechahoraproceso==null ? null : new java.sql.Timestamp( fechahoraproceso.getTime() ) } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'RFCRECEPTOR = :rfcreceptor'.
	 */
	public Comprobantefiscal[] findWhereRfcreceptorEquals(String rfcreceptor) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFCRECEPTOR = ? ORDER BY RFCRECEPTOR", new Object[] { rfcreceptor } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'SUBTOTAL = :subtotal'.
	 */
	public Comprobantefiscal[] findWhereSubtotalEquals(double subtotal) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUBTOTAL = ? ORDER BY SUBTOTAL", new Object[] {  new Double(subtotal) } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'TOTAL = :total'.
	 */
	public Comprobantefiscal[] findWhereTotalEquals(double total) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TOTAL = ? ORDER BY TOTAL", new Object[] {  new Double(total) } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'CADENAORIGINAL = :cadenaoriginal'.
	 */
	public Comprobantefiscal[] findWhereCadenaoriginalEquals(String cadenaoriginal) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CADENAORIGINAL = ? ORDER BY CADENAORIGINAL", new Object[] { cadenaoriginal } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'FECHACANCELACION = :fechacancelacion'.
	 */
	public Comprobantefiscal[] findWhereFechacancelacionEquals(Date fechacancelacion) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHACANCELACION = ? ORDER BY FECHACANCELACION", new Object[] { fechacancelacion==null ? null : new java.sql.Timestamp( fechacancelacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'MONEDA = :moneda'.
	 */
	public Comprobantefiscal[] findWhereMonedaEquals(String moneda) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONEDA = ? ORDER BY MONEDA", new Object[] { moneda } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'OBSERVACIONES = :observaciones'.
	 */
	public Comprobantefiscal[] findWhereObservacionesEquals(String observaciones) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OBSERVACIONES = ? ORDER BY OBSERVACIONES", new Object[] { observaciones } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'NOMBRE_RECEPTOR = :nombreReceptor'.
	 */
	public Comprobantefiscal[] findWhereNombreReceptorEquals(String nombreReceptor) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_RECEPTOR = ? ORDER BY NOMBRE_RECEPTOR", new Object[] { nombreReceptor } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'EMAIL = :email'.
	 */
	public Comprobantefiscal[] findWhereEmailEquals(String email) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMAIL = ? ORDER BY EMAIL", new Object[] { email } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'REFERENCIA1 = :referencia1'.
	 */
	public Comprobantefiscal[] findWhereReferencia1Equals(String referencia1) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REFERENCIA1 = ? ORDER BY REFERENCIA1", new Object[] { referencia1 } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'REFERENCIA2 = :referencia2'.
	 */
	public Comprobantefiscal[] findWhereReferencia2Equals(String referencia2) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REFERENCIA2 = ? ORDER BY REFERENCIA2", new Object[] { referencia2 } );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the criteria 'REFERENCIA3 = :referencia3'.
	 */
	public Comprobantefiscal[] findWhereReferencia3Equals(String referencia3) throws ComprobantefiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REFERENCIA3 = ? ORDER BY REFERENCIA3", new Object[] { referencia3 } );
	}

	/**
	 * Method 'ComprobantefiscalDaoImpl'
	 * 
	 */
	public ComprobantefiscalDaoImpl()
	{
	}

	/**
	 * Method 'ComprobantefiscalDaoImpl'
	 * 
	 * @param userConn
	 */
	public ComprobantefiscalDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "COMPROBANTEFISCAL";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Comprobantefiscal fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Comprobantefiscal dto = new Comprobantefiscal();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Comprobantefiscal[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Comprobantefiscal dto = new Comprobantefiscal();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Comprobantefiscal ret[] = new Comprobantefiscal[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Comprobantefiscal dto, ResultSet rs) throws SQLException
	{
		dto.setIdcomprobantefiscal( rs.getInt( COLUMN_IDCOMPROBANTEFISCAL ) );
		dto.setIdemisor( rs.getInt( COLUMN_IDEMISOR ) );
		dto.setIdarchivomaestro( rs.getInt( COLUMN_IDARCHIVOMAESTRO ) );
		if (rs.wasNull()) {
			dto.setIdarchivomaestroNull( true );
		}
		
		dto.setIdestatus( rs.getInt( COLUMN_IDESTATUS ) );
		dto.setIdtipocomprobante( rs.getInt( COLUMN_IDTIPOCOMPROBANTE ) );
		dto.setNombrearchivoxml( rs.getString( COLUMN_NOMBREARCHIVOXML ) );
		dto.setNombrearchivopdf( rs.getString( COLUMN_NOMBREARCHIVOPDF ) );
		dto.setSerie( rs.getString( COLUMN_SERIE ) );
		dto.setFolio( rs.getString( COLUMN_FOLIO ) );
		dto.setUuid( rs.getString( COLUMN_UUID ) );
		dto.setSelloemisor( rs.getString( COLUMN_SELLOEMISOR ) );
		dto.setFechahorasellado( rs.getTimestamp(COLUMN_FECHAHORASELLADO ) );
		dto.setFechahoratimbrado( rs.getTimestamp(COLUMN_FECHAHORATIMBRADO ) );
		dto.setFechahoraproceso( rs.getTimestamp(COLUMN_FECHAHORAPROCESO ) );
		dto.setRfcreceptor( rs.getString( COLUMN_RFCRECEPTOR ) );
		dto.setSubtotal( rs.getDouble( COLUMN_SUBTOTAL ) );
		if (rs.wasNull()) {
			dto.setSubtotalNull( true );
		}
		
		dto.setTotal( rs.getDouble( COLUMN_TOTAL ) );
		if (rs.wasNull()) {
			dto.setTotalNull( true );
		}
		
		dto.setCadenaoriginal( rs.getString( COLUMN_CADENAORIGINAL ) );
		dto.setFechacancelacion( rs.getTimestamp(COLUMN_FECHACANCELACION ) );
		dto.setMoneda( rs.getString( COLUMN_MONEDA ) );
		dto.setObservaciones( rs.getString( COLUMN_OBSERVACIONES ) );
		dto.setNombreReceptor( rs.getString( COLUMN_NOMBRE_RECEPTOR ) );
		dto.setEmail( rs.getString( COLUMN_EMAIL ) );
		dto.setReferencia1( rs.getString( COLUMN_REFERENCIA1 ) );
		dto.setReferencia2( rs.getString( COLUMN_REFERENCIA2 ) );
		dto.setReferencia3( rs.getString( COLUMN_REFERENCIA3 ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Comprobantefiscal dto)
	{
		dto.setIdcomprobantefiscalModified( false );
		dto.setIdemisorModified( false );
		dto.setIdarchivomaestroModified( false );
		dto.setIdestatusModified( false );
		dto.setIdtipocomprobanteModified( false );
		dto.setNombrearchivoxmlModified( false );
		dto.setNombrearchivopdfModified( false );
		dto.setSerieModified( false );
		dto.setFolioModified( false );
		dto.setUuidModified( false );
		dto.setSelloemisorModified( false );
		dto.setFechahoraselladoModified( false );
		dto.setFechahoratimbradoModified( false );
		dto.setFechahoraprocesoModified( false );
		dto.setRfcreceptorModified( false );
		dto.setSubtotalModified( false );
		dto.setTotalModified( false );
		dto.setCadenaoriginalModified( false );
		dto.setFechacancelacionModified( false );
		dto.setMonedaModified( false );
		dto.setObservacionesModified( false );
		dto.setNombreReceptorModified( false );
		dto.setEmailModified( false );
		dto.setReferencia1Modified( false );
		dto.setReferencia2Modified( false );
		dto.setReferencia3Modified( false );
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the specified arbitrary SQL statement
	 */
	public Comprobantefiscal[] findByDynamicSelect(String sql, Object[] sqlParams) throws ComprobantefiscalDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ComprobantefiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the COMPROBANTEFISCAL table that match the specified arbitrary SQL statement
	 */
	public Comprobantefiscal[] findByDynamicWhere(String sql, Object[] sqlParams) throws ComprobantefiscalDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ComprobantefiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
